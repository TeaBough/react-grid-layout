{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///react-grid-layout.min.js","webpack:///webpack/bootstrap f0fd1d129c5e531dc173","webpack:///./index-dev.js","webpack:///external \"React\"","webpack:///./lib/utils.js","webpack:///./~/react/lib/ReactComponentWithPureRenderMixin.js","webpack:///./~/react/lib/cloneWithProps.js","webpack:///./~/react/lib/emptyFunction.js","webpack:///./lib/mixins/PureDeepRenderMixin.js","webpack:///./~/react/lib/warning.js","webpack:///./lib/ReactGridLayout.jsx","webpack:///./lib/mixins/WidthListeningMixin.js","webpack:///./~/object-assign/index.js","webpack:///./~/react-resizable/build/Resizable.js","webpack:///./~/react/lib/Object.assign.js","webpack:///./lib/GridItem.jsx","webpack:///./lib/ResponsiveReactGridLayout.jsx","webpack:///./lib/responsiveUtils.js","webpack:///./~/deep-equal/index.js","webpack:///./~/deep-equal/lib/is_arguments.js","webpack:///./~/deep-equal/lib/keys.js","webpack:///./~/react-draggable/lib/draggable.js","webpack:///./~/react-resizable/build/ResizableBox.js","webpack:///./~/react-resizable/index.js","webpack:///./~/react-resizable/~/react-draggable/lib/draggable.js","webpack:///./~/react/lib/ReactContext.js","webpack:///./~/react/lib/ReactCurrentOwner.js","webpack:///./~/react/lib/ReactElement.js","webpack:///./~/react/lib/ReactPropTransferer.js","webpack:///./~/react/lib/invariant.js","webpack:///./~/react/lib/joinClasses.js","webpack:///./~/react/lib/keyOf.js","webpack:///./~/react/lib/shallowEqual.js","webpack:///./~/react-draggable/index.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","i","_m","args","slice","fn","a","b","apply","concat","Responsive","assign","utils","bottom","layout","bottomY","max","len","length","y","h","clone","obj","collides","l1","l2","x","w","compact","compareWith","getStatics","out","sorted","sortLayoutItemsByRowCol","l","compactItem","push","indexOf","moved","getFirstCollision","correctBounds","bounds","collidesWith","cols","getLayoutItem","layoutItem","getAllCollisions","moveElement","isUserAction","movingUp","undefined","reverse","collisions","collision","moveElementAwayFromCollision","itemToMove","fakeItem","Math","perc","num","setTransform","style","coords","replace","transform","WebkitTransform","MozTransform","msTransform","OTransform","sort","synchronizeLayoutWithChildren","initialLayout","children","child","exists","key","g","props","_grid","validateLayout","min","contextName","subProps","Array","isArray","Error","j","shallowEqual","ReactComponentWithPureRenderMixin","shouldComponentUpdate","nextProps","nextState","state","cloneWithProps","newProps","ReactPropTransferer","mergeProps","hasOwnProperty","CHILDREN_PROP","ReactElement","createElement","type","keyOf","makeEmptyFunction","arg","emptyFunction","thatReturns","thatReturnsFalse","thatReturnsTrue","thatReturnsNull","thatReturnsThis","thatReturnsArgument","deepEqual","PureDeepRenderMixin","warning","_objectWithoutProperties","keys","target","Object","prototype","_extends","arguments","source","React","GridItem","WidthListeningMixin","ReactGridLayout","createClass","displayName","mixins","propTypes","autoSize","PropTypes","bool","number","draggableCancel","string","draggableHandle","_layout","_layoutWrapper","toString","layouts","margin","array","rowHeight","isDraggable","isResizable","useCSSTransforms","onLayoutChange","func","onDragStart","onDrag","onDragStop","onResizeStart","onResize","onResizeStop","_children","_childrenWrapper","propName","node","Children","forEach","getDefaultProps","getInitialState","width","initialWidth","activeDrag","componentDidMount","componentWillReceiveProps","onWidthChange","setState","JSON","stringify","componentDidUpdate","prevProps","prevState","containerHeight","_ref","e","element","position","oldL","placeholder","size","isPlaceholder","className","containerWidth","processGridItem","draggable","resizable","drag","moveOnStartChange","cancel","handle","isMounted","usePercentages","render","_props","height","map","listenToWindowResize","window","addEventListener","onWindowResize","componentWillUnmount","removeEventListener","getDOMNode","offsetWidth","ToObject","val","TypeError","from","to","s","calcWH","_ref2","handleSize","left","top","parseConstraints","constraints","Draggable","PureRenderMixin","isRequired","draggableOpts","object","minConstraints","maxConstraints","resizeHandler","handlerName","me","__spread","start","onStop","onStart","nextIndex","nextSource","constraintError","name","Resizable","minW","maxW","minH","maxH","Infinity","resizing","calcPosition","calcXY","round","floor","mixinDraggable","onDragHandler","mixinResizable","maxWidth","mins","maxes","onResizeHandler","_me$calcXY","_me$calcWH","pos","only","join","responsiveUtils","ResponsiveReactGridLayout","breakpoint","breakpoints","_layouts","_layoutsWrapper","k","onBreakpointChange","lg","md","sm","xs","xxs","getBreakpointFromWidth","getColsFromBreakpoint","findOrGenerateResponsiveLayout","newLayout","newState","parse","sortBreakpoints","matching","breakpointName","lastBreakpoint","breakpointsSorted","breakpointsAbove","isUndefinedOrNull","value","isBuffer","copy","objEquiv","opts","isArguments","pSlice","ka","objectKeys","kb","actual","expected","Date","getTime","strict","supported","unsupported","propertyIsEnumerable","supportsArgumentsClass","shim","createUIEvent","_pendingState","clientY","clientX","canDragY","axis","canDragX","isFunction","findInArray","callback","matchesSelector","el","selector","method","positionToCSSTransform","getControlPosition","touches","addEvent","event","handler","attachEvent","removeEvent","detachEvent","isTouchDevice","dragEventFor","eventsFor","touch","move","end","mouse","oneOf","grid","arrayOf","zIndex","onMouseDown","handleDrag","handleDragEnd","NaN","dragging","startX","startY","offsetX","offsetY","handleDragStart","button","dragPoint","parseInt","document","body","directionX","directionY","abs","isNaN","onTouchStart","ev","preventDefault","bind","onMouseUp","onTouchEnd","ResizableBox","console","log","ReactContext","current","withContext","newContext","scopedCallback","result","previousContext","ReactCurrentOwner","RESERVED_PROPS","ref","owner","context","_owner","_context","_isReactElement","config","childrenLength","childArray","defaultProps","createFactory","cloneAndReplaceProps","oldElement","newElement","isValidElement","isElement","createTransferStrategy","mergeStrategy","transferInto","thisKey","transferStrategy","TransferStrategies","invariant","joinClasses","transferStrategyMerge","oldProps","Mixin","transferPropsTo","condition","format","d","f","error","argIndex","framesToPop","nextClass","argLength","ii","oneKeyObj","objA","objB","__webpack_module_template_argument_0__"],"mappings":"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","file":"react-grid-layout.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"React\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"React\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactGridLayout\"] = factory(require(\"React\"));\n\telse\n\t\troot[\"ReactGridLayout\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"React\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"React\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactGridLayout\"] = factory(require(\"React\"));\n\telse\n\t\troot[\"ReactGridLayout\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ((function(modules) {\n\t// Check all modules for deduplicated modules\n\tfor(var i in modules) {\n\t\tswitch(typeof modules[i]) {\n\t\tcase \"number\":\n\t\t\t// Module is a copy of another module\n\t\t\tmodules[i] = modules[modules[i]];\n\t\t\tbreak;\n\t\tcase \"object\":\n\t\t\t// Module can be created from a template\n\t\t\tmodules[i] = (function(_m) {\n\t\t\t\tvar args = _m.slice(1), fn = modules[_m[0]];\n\t\t\t\treturn function (a,b,c) {\n\t\t\t\t\tfn.apply(null, [a,b,c].concat(args));\n\t\t\t\t};\n\t\t\t}(modules[i]));\n\t\t}\n\t}\n\treturn modules;\n}([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = __webpack_require__(8);\n\tmodule.exports.Responsive = __webpack_require__(14);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar assign = __webpack_require__(10);\n\t\n\tvar utils = module.exports = {\n\t\n\t  /**\n\t   * Return the bottom coordinate of the layout.\n\t   *\n\t   * @param  {Array} layout Layout array.\n\t   * @return {Number}       Bottom coordinate.\n\t   */\n\t  bottom: function bottom(layout) {\n\t    var max = 0,\n\t        bottomY;\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      bottomY = layout[i].y + layout[i].h;\n\t      if (bottomY > max) max = bottomY;\n\t    }\n\t    return max;\n\t  },\n\t\n\t  /**\n\t   * Clones a shallow object.\n\t   * @param  {Object} obj Object to clone.\n\t   * @return {Object}   Cloned object.\n\t   */\n\t  clone: function clone(obj) {\n\t    return assign({}, obj);\n\t  },\n\t\n\t  /**\n\t   * Given two layouts, check if they collide.\n\t   *\n\t   * @param  {Object} l1 Layout object.\n\t   * @param  {Object} l2 Layout object.\n\t   * @return {Boolean}   True if colliding.\n\t   */\n\t  collides: function collides(l1, l2) {\n\t    if (l1 === l2) {\n\t      return false;\n\t    } // same element\n\t    if (l1.x + l1.w <= l2.x) {\n\t      return false;\n\t    } // l1 is left of l2\n\t    if (l1.x >= l2.x + l2.w) {\n\t      return false;\n\t    } // l1 is right of l2\n\t    if (l1.y + l1.h <= l2.y) {\n\t      return false;\n\t    } // l1 is above l2\n\t    if (l1.y >= l2.y + l2.h) {\n\t      return false;\n\t    } // l1 is below l2\n\t    return true; // boxes overlap\n\t  },\n\t\n\t  /**\n\t   * Given a layout, compact it. This involves going down each y coordinate and removing gaps\n\t   * between items.\n\t   *\n\t   * @param  {Array} layout Layout.\n\t   * @return {Array}       Compacted Layout.\n\t   */\n\t  compact: function compact(layout) {\n\t    // Statics go in the compareWith array right away so items flow around them.\n\t    var compareWith = utils.getStatics(layout),\n\t        out = [];\n\t    // We go through the items by row and column.\n\t    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\t\n\t    for (var i = 0, len = sorted.length; i < len; i++) {\n\t      var l = sorted[i];\n\t\n\t      // Don't move static elements\n\t      if (!l[\"static\"]) {\n\t        l = utils.compactItem(compareWith, l);\n\t\n\t        // Add to comparison array. We only collide with items before this one.\n\t        // Statics are already in this array.\n\t        compareWith.push(l);\n\t      }\n\t\n\t      // Add to output array to make sure they still come out in the right order.\n\t      out[layout.indexOf(l)] = l;\n\t\n\t      // Clear moved flag, if it exists.\n\t      delete l.moved;\n\t    }\n\t\n\t    return out;\n\t  },\n\t\n\t  compactItem: function compactItem(compareWith, l) {\n\t    // Move the element up as far as it can go without colliding.\n\t    while (l.y > 0 && !utils.getFirstCollision(compareWith, l)) {\n\t      l.y--;\n\t    }\n\t\n\t    // Move it down, and keep moving it down if it's colliding.\n\t    var collides;\n\t    while (collides = utils.getFirstCollision(compareWith, l)) {\n\t      l.y = collides.y + collides.h;\n\t    }\n\t    return l;\n\t  },\n\t\n\t  /**\n\t   * Given a layout, make sure all elements fit within its bounds.\n\t   *\n\t   * @param  {Array} layout Layout array.\n\t   * @param  {Number} bounds Number of columns.\n\t   * @return {[type]}        [description]\n\t   */\n\t  correctBounds: function correctBounds(layout, bounds) {\n\t    var collidesWith = utils.getStatics(layout);\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      var l = layout[i];\n\t      // Overflows right\n\t      if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;\n\t      // Overflows left\n\t      if (l.x < 0) {\n\t        l.x = 0;\n\t        l.w = bounds.cols;\n\t      }\n\t      if (!l[\"static\"]) collidesWith.push(l);else {\n\t        // If this is static and collides with other statics, we must move it down.\n\t        // We have to do something nicer than just letting them overlap.\n\t        while (utils.getFirstCollision(collidesWith, l)) {\n\t          l.y++;\n\t        }\n\t      }\n\t    }\n\t    return layout;\n\t  },\n\t\n\t  /**\n\t   * Get a layout item by ID. Used so we can override later on if necessary.\n\t   *\n\t   * @param  {Array}  layout Layout array.\n\t   * @param  {Number} id     ID\n\t   * @return {LayoutItem}    Item at ID.\n\t   */\n\t  getLayoutItem: function getLayoutItem(layout, id) {\n\t    id = \"\" + id;\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (\"\" + layout[i].i === id) {\n\t        return layout[i];\n\t      }\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Returns the first item this layout collides with.\n\t   * It doesn't appear to matter which order we approach this from, although\n\t   * perhaps that is the wrong thing to do.\n\t   *\n\t   * @param  {Object} layoutItem Layout item.\n\t   * @return {Object|undefined}  A colliding layout item, or undefined.\n\t   */\n\t  getFirstCollision: function getFirstCollision(layout, layoutItem) {\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (utils.collides(layout[i], layoutItem)) {\n\t        return layout[i];\n\t      }\n\t    }\n\t  },\n\t\n\t  getAllCollisions: function getAllCollisions(layout, layoutItem) {\n\t    var out = [];\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (utils.collides(layout[i], layoutItem)) out.push(layout[i]);\n\t    }\n\t    return out;\n\t  },\n\t\n\t  /**\n\t   * Get all static elements.\n\t   * @param  {Array} layout Array of layout objects.\n\t   * @return {Array}        Array of static layout items..\n\t   */\n\t  getStatics: function getStatics(layout) {\n\t    var out = [];\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      if (layout[i][\"static\"]) out.push(layout[i]);\n\t    }\n\t    return out;\n\t  },\n\t\n\t  /**\n\t   * Move an element. Responsible for doing cascading movements of other elements.\n\t   *\n\t   * @param  {Array}      layout Full layout to modify.\n\t   * @param  {LayoutItem} l      element to move.\n\t   * @param  {Number}     [x]    X position in grid units.\n\t   * @param  {Number}     [y]    Y position in grid units.\n\t   * @param  {Boolean}    [isUserAction] If true, designates that the item we're moving is\n\t   *                                     being dragged/resized by th euser.\n\t   */\n\t  moveElement: function moveElement(layout, l, x, y, isUserAction) {\n\t    if (l[\"static\"]) {\n\t      return layout;\n\t    } // Short-circuit if nothing to do.\n\t    if (l.y === y && l.x === x) {\n\t      return layout;\n\t    }var movingUp = l.y > y;\n\t    // This is quite a bit faster than extending the object\n\t    if (x !== undefined) l.x = x;\n\t    if (y !== undefined) l.y = y;\n\t    l.moved = true;\n\t\n\t    // If this collides with anything, move it.\n\t    // When doing this comparison, we have to sort the items we compare with\n\t    // to ensure, in the case of multiple collisions, that we're getting the\n\t    // nearest collision.\n\t    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\t    if (movingUp) sorted = sorted.reverse();\n\t    var collisions = utils.getAllCollisions(sorted, l);\n\t\n\t    // Move each item that collides away from this element.\n\t    for (var i = 0, len = collisions.length; i < len; i++) {\n\t      var collision = collisions[i];\n\t      // console.log('resolving collision between', l.i, 'at', l.y, 'and', collision.i, 'at', collision.y);\n\t\n\t      // Short circuit so we can't infinite loop\n\t      if (collision.moved) continue;\n\t\n\t      // This makes it feel a bit more precise by waiting to swap for just a bit when moving up.\n\t      if (l.y > collision.y && l.y - collision.y > collision.h / 4) continue;\n\t\n\t      // Don't move static items - we have to move *this* element away\n\t      if (collision[\"static\"]) {\n\t        layout = utils.moveElementAwayFromCollision(layout, collision, l, isUserAction);\n\t      } else {\n\t        layout = utils.moveElementAwayFromCollision(layout, l, collision, isUserAction);\n\t      }\n\t    }\n\t\n\t    return layout;\n\t  },\n\t\n\t  /**\n\t   * This is where the magic needs to happen - given a collision, move an element away from the collision.\n\t   * We attempt to move it up if there's room, otherwise it goes below.\n\t   *\n\t   * @param  {Array} layout            Full layout to modify.\n\t   * @param  {LayoutItem} collidesWith Layout item we're colliding with.\n\t   * @param  {LayoutItem} itemToMove   Layout item we're moving.\n\t   * @param  {Boolean} [isUserAction]  If true, designates that the item we're moving is being dragged/resized\n\t   *                                   by the user.\n\t   */\n\t  moveElementAwayFromCollision: function moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction) {\n\t\n\t    // If there is enough space above the collision to put this element, move it there.\n\t    // We only do this on the main collision as this can get funky in cascades and cause\n\t    // unwanted swapping behavior.\n\t    if (isUserAction) {\n\t      // Make a mock item so we don't modify the item here, only modify in moveElement.\n\t      var fakeItem = {\n\t        x: itemToMove.x,\n\t        y: itemToMove.y,\n\t        w: itemToMove.w,\n\t        h: itemToMove.h };\n\t      fakeItem.y = Math.max(collidesWith.y - itemToMove.h, 0);\n\t      if (!utils.getFirstCollision(layout, fakeItem)) {\n\t        return utils.moveElement(layout, itemToMove, undefined, fakeItem.y);\n\t      }\n\t    }\n\t\n\t    // Previously this was optimized to move below the collision directly, but this can cause problems\n\t    // with cascading moves, as an item may actually leapflog a collision and cause a reversal in order.\n\t    return utils.moveElement(layout, itemToMove, undefined, itemToMove.y + 1);\n\t  },\n\t\n\t  /**\n\t   * Helper to convert a number to a percentage string.\n\t   *\n\t   * @param  {Number} num Any number\n\t   * @return {String}     That number as a percentage.\n\t   */\n\t  perc: function perc(num) {\n\t    return num * 100 + \"%\";\n\t  },\n\t\n\t  setTransform: function setTransform(style, coords) {\n\t    // Replace unitless items with px\n\t    var x = (\"\" + coords[0]).replace(/(\\d)$/, \"$1px\");\n\t    var y = (\"\" + coords[1]).replace(/(\\d)$/, \"$1px\");\n\t    style.transform = \"translate(\" + x + \",\" + y + \")\";\n\t    style.WebkitTransform = \"translate(\" + x + \",\" + y + \")\";\n\t    style.MozTransform = \"translate(\" + x + \",\" + y + \")\";\n\t    style.msTransform = \"translate(\" + x + \",\" + y + \")\";\n\t    style.OTransform = \"translate(\" + x + \",\" + y + \")\";\n\t    return style;\n\t  },\n\t\n\t  /**\n\t   * Get layout items sorted from top left to right and down.\n\t   *\n\t   * @return {Array} Array of layout objects.\n\t   * @return {Array}        Layout, sorted static items first.\n\t   */\n\t  sortLayoutItemsByRowCol: function sortLayoutItemsByRowCol(layout) {\n\t    return [].concat(layout).sort(function (a, b) {\n\t      if (a.y > b.y || a.y === b.y && a.x > b.x) {\n\t        return 1;\n\t      }\n\t      return -1;\n\t    });\n\t  },\n\t\n\t  /**\n\t   * Generate a layout using the initialLayout an children as a template.\n\t   * Missing entries will be added, extraneous ones will be truncated.\n\t   *\n\t   * @param  {Array}  initialLayout Layout passed in through props.\n\t   * @param  {String} breakpoint    Current responsive breakpoint.\n\t   * @return {Array}                Working layout.\n\t   */\n\t  synchronizeLayoutWithChildren: function synchronizeLayoutWithChildren(initialLayout, children, cols) {\n\t    children = [].concat(children); // ensure 'children' is always an array\n\t    initialLayout = initialLayout || [];\n\t\n\t    // Generate one layout item per child.\n\t    var layout = [];\n\t    for (var i = 0, len = children.length; i < len; i++) {\n\t      var child = children[i];\n\t      // Don't overwrite if it already exists.\n\t      var exists = utils.getLayoutItem(initialLayout, child.key);\n\t      if (exists) {\n\t        // Ensure 'i' is always a string\n\t        exists.i = \"\" + exists.i;\n\t        layout.push(exists);\n\t        continue;\n\t      }\n\t      // New item: attempt to use a layout item from the child, if it exists.\n\t      var g = child.props._grid;\n\t      if (g) {\n\t        utils.validateLayout([g], \"ReactGridLayout.child\");\n\t        // Validated; add it to the layout. Bottom 'y' possible is the bottom of the layout.\n\t        // This allows you to do nice stuff like specify {y: Infinity}\n\t        layout.push(assign({}, g, { y: Math.min(utils.bottom(layout), g.y), i: child.key }));\n\t      } else {\n\t        // Nothing provided: ensure this is added to the bottom\n\t        layout.push({ w: 1, h: 1, x: 0, y: utils.bottom(layout), i: child.key });\n\t      }\n\t    }\n\t\n\t    // Correct the layout.\n\t    layout = utils.correctBounds(layout, { cols: cols });\n\t    layout = utils.compact(layout);\n\t\n\t    return layout;\n\t  },\n\t\n\t  /**\n\t   * Validate a layout. Throws errors.\n\t   *\n\t   * @param  {Array}  layout        Array of layout items.\n\t   * @param  {String} [contextName] Context name for errors.\n\t   * @throw  {Error}                Validation error.\n\t   */\n\t  validateLayout: function validateLayout(layout, contextName) {\n\t    contextName = contextName || \"Layout\";\n\t    var subProps = [\"x\", \"y\", \"w\", \"h\"];\n\t    if (!Array.isArray(layout)) throw new Error(contextName + \" must be an array!\");\n\t    for (var i = 0, len = layout.length; i < len; i++) {\n\t      for (var j = 0; j < subProps.length; j++) {\n\t        if (typeof layout[i][subProps[j]] !== \"number\") {\n\t          throw new Error(\"ReactGridLayout: \" + contextName + \"[\" + i + \"].\" + subProps[j] + \" must be a Number!\");\n\t        }\n\t      }\n\t      if (layout[i][\"static\"] !== undefined && typeof layout[i][\"static\"] !== \"boolean\") {\n\t        throw new Error(\"ReactGridLayout: \" + contextName + \"[\" + i + \"].static must be a Boolean!\");\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t* @providesModule ReactComponentWithPureRenderMixin\n\t*/\n\t\n\t\"use strict\";\n\t\n\tvar shallowEqual = __webpack_require__(32);\n\t\n\t/**\n\t * If your React component's render function is \"pure\", e.g. it will render the\n\t * same result given the same props and state, provide this Mixin for a\n\t * considerable performance boost.\n\t *\n\t * Most React components have pure render functions.\n\t *\n\t * Example:\n\t *\n\t *   var ReactComponentWithPureRenderMixin =\n\t *     require('ReactComponentWithPureRenderMixin');\n\t *   React.createClass({\n\t *     mixins: [ReactComponentWithPureRenderMixin],\n\t *\n\t *     render: function() {\n\t *       return <div className={this.props.className}>foo</div>;\n\t *     }\n\t *   });\n\t *\n\t * Note: This only checks shallow equality for props and state. If these contain\n\t * complex data structures this mixin may have false-negatives for deeper\n\t * differences. Only mixin to components which have simple props and state, or\n\t * use `forceUpdate()` when you know deep data structures have changed.\n\t */\n\tvar ReactComponentWithPureRenderMixin = {\n\t  shouldComponentUpdate: function(nextProps, nextState) {\n\t    return !shallowEqual(this.props, nextProps) ||\n\t           !shallowEqual(this.state, nextState);\n\t  }\n\t};\n\t\n\tmodule.exports = ReactComponentWithPureRenderMixin;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @typechecks\n\t * @providesModule cloneWithProps\n\t */\n\t\n\t\"use strict\";\n\t\n\tvar ReactElement = __webpack_require__(27);\n\tvar ReactPropTransferer = __webpack_require__(28);\n\t\n\tvar keyOf = __webpack_require__(31);\n\tvar warning = __webpack_require__(7);\n\t\n\tvar CHILDREN_PROP = keyOf({children: null});\n\t\n\t/**\n\t * Sometimes you want to change the props of a child passed to you. Usually\n\t * this is to add a CSS class.\n\t *\n\t * @param {object} child child component you'd like to clone\n\t * @param {object} props props you'd like to modify. They will be merged\n\t * as if you used `transferPropsTo()`.\n\t * @return {object} a clone of child with props merged in.\n\t */\n\tfunction cloneWithProps(child, props) {\n\t  if (false) {\n\t    (\"production\" !== process.env.NODE_ENV ? warning(\n\t      !child.ref,\n\t      'You are calling cloneWithProps() on a child with a ref. This is ' +\n\t      'dangerous because you\\'re creating a new child which will not be ' +\n\t      'added as a ref to its parent.'\n\t    ) : null);\n\t  }\n\t\n\t  var newProps = ReactPropTransferer.mergeProps(props, child.props);\n\t\n\t  // Use `child.props.children` if it is provided.\n\t  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&\n\t      child.props.hasOwnProperty(CHILDREN_PROP)) {\n\t    newProps.children = child.props.children;\n\t  }\n\t\n\t  // The current API doesn't retain _owner and _context, which is why this\n\t  // doesn't use ReactElement.cloneAndReplaceProps.\n\t  return ReactElement.createElement(child.type, newProps);\n\t}\n\t\n\tmodule.exports = cloneWithProps;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule emptyFunction\n\t */\n\t\n\tfunction makeEmptyFunction(arg) {\n\t  return function() {\n\t    return arg;\n\t  };\n\t}\n\t\n\t/**\n\t * This function accepts and discards inputs; it has no side effects. This is\n\t * primarily useful idiomatically for overridable function endpoints which\n\t * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n\t */\n\tfunction emptyFunction() {}\n\t\n\temptyFunction.thatReturns = makeEmptyFunction;\n\temptyFunction.thatReturnsFalse = makeEmptyFunction(false);\n\temptyFunction.thatReturnsTrue = makeEmptyFunction(true);\n\temptyFunction.thatReturnsNull = makeEmptyFunction(null);\n\temptyFunction.thatReturnsThis = function() { return this; };\n\temptyFunction.thatReturnsArgument = function(arg) { return arg; };\n\t\n\tmodule.exports = emptyFunction;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar deepEqual = __webpack_require__(16);\n\t\n\t// Like PureRenderMixin, but with deep comparisons.\n\tvar PureDeepRenderMixin = {\n\t  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {\n\t    return !deepEqual(this.props, nextProps) || !deepEqual(this.state, nextState);\n\t  }\n\t};\n\t\n\tmodule.exports = PureDeepRenderMixin;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule warning\n\t */\n\t\n\t\"use strict\";\n\t\n\tvar emptyFunction = __webpack_require__(5);\n\t\n\t/**\n\t * Similar to invariant but only logs a warning if the condition is not met.\n\t * This can be used to log issues in development environments in critical\n\t * paths. Removing the logging code for production environments will keep the\n\t * same logic and follow the same code paths.\n\t */\n\t\n\tvar warning = emptyFunction;\n\t\n\tif (false) {\n\t  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n\t    if (format === undefined) {\n\t      throw new Error(\n\t        '`warning(condition, format, ...args)` requires a warning ' +\n\t        'message argument'\n\t      );\n\t    }\n\t\n\t    if (!condition) {\n\t      var argIndex = 0;\n\t      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));\n\t    }\n\t  };\n\t}\n\t\n\tmodule.exports = warning;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar React = __webpack_require__(1);\n\tvar GridItem = __webpack_require__(13);\n\tvar utils = __webpack_require__(2);\n\tvar PureDeepRenderMixin = __webpack_require__(6);\n\tvar WidthListeningMixin = __webpack_require__(9);\n\t\n\t/**\n\t * A reactive, fluid grid layout with draggable, resizable components.\n\t */\n\tvar ReactGridLayout = React.createClass({\n\t  displayName: \"ReactGridLayout\",\n\t\n\t  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\t\n\t  propTypes: {\n\t    //\n\t    // Basic props\n\t    //\n\t\n\t    // If true, the container height swells and contracts to fit contents\n\t    autoSize: React.PropTypes.bool,\n\t    // # of cols.\n\t    cols: React.PropTypes.number,\n\t\n\t    // A selector that will not be draggable.\n\t    draggableCancel: React.PropTypes.string,\n\t    // A selector for the draggable handler\n\t    draggableHandle: React.PropTypes.string,\n\t\n\t    // layout is an array of object with the format:\n\t    // {x: Number, y: Number, w: Number, h: Number}\n\t    layout: (function (_layout) {\n\t      var _layoutWrapper = function layout(_x, _x2, _x3) {\n\t        return _layout.apply(this, arguments);\n\t      };\n\t\n\t      _layoutWrapper.toString = function () {\n\t        return _layout.toString();\n\t      };\n\t\n\t      return _layoutWrapper;\n\t    })(function (props, propName, componentName) {\n\t      var layout = props.layout;\n\t      // I hope you're setting the _grid property on the grid items\n\t      if (layout === undefined) return;\n\t      utils.validateLayout(layout, \"layout\");\n\t    }),\n\t\n\t    layouts: function layouts(props, propName, componentName) {\n\t      if (props.layouts) {\n\t        throw new Error(\"ReactGridLayout does not use `layouts`: Use ReactGridLayout.Responsive.\");\n\t      }\n\t    },\n\t\n\t    // margin between items [x, y] in px\n\t    margin: React.PropTypes.array,\n\t    // Rows have a static height, but you can change this based on breakpoints if you like\n\t    rowHeight: React.PropTypes.number,\n\t\n\t    //\n\t    // Flags\n\t    //\n\t    isDraggable: React.PropTypes.bool,\n\t    isResizable: React.PropTypes.bool,\n\t    // Use CSS transforms instead of top/left\n\t    useCSSTransforms: React.PropTypes.bool,\n\t\n\t    //\n\t    // Callbacks\n\t    //\n\t\n\t    // Callback so you can save the layout.\n\t    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n\t    onLayoutChange: React.PropTypes.func,\n\t\n\t    // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e).\n\t    // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n\t    onDragStart: React.PropTypes.func,\n\t    // Calls on each drag movement.\n\t    onDrag: React.PropTypes.func,\n\t    // Calls when drag is complete.\n\t    onDragStop: React.PropTypes.func,\n\t    //Calls when resize starts.\n\t    onResizeStart: React.PropTypes.func,\n\t    // Calls when resize movement happens.\n\t    onResize: React.PropTypes.func,\n\t    // Calls when resize is complete.\n\t    onResizeStop: React.PropTypes.func,\n\t\n\t    //\n\t    // Other validations\n\t    //\n\t\n\t    // Children must not have duplicate keys.\n\t    children: (function (_children) {\n\t      var _childrenWrapper = function children(_x, _x2, _x3) {\n\t        return _children.apply(this, arguments);\n\t      };\n\t\n\t      _childrenWrapper.toString = function () {\n\t        return _children.toString();\n\t      };\n\t\n\t      return _childrenWrapper;\n\t    })(function (props, propName, componentName) {\n\t      React.PropTypes.node.apply(this, arguments);\n\t      var children = props[propName];\n\t\n\t      // Check children keys for duplicates. Throw if found.\n\t      var keys = {};\n\t      React.Children.forEach(children, function (child, i, list) {\n\t        if (keys[child.key]) {\n\t          throw new Error(\"Duplicate child key found! This will cause problems in ReactGridLayout.\");\n\t        }\n\t        keys[child.key] = true;\n\t      });\n\t    })\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      autoSize: true,\n\t      cols: 12,\n\t      rowHeight: 150,\n\t      layout: [],\n\t      margin: [10, 10],\n\t      isDraggable: true,\n\t      isResizable: true,\n\t      useCSSTransforms: true,\n\t      onLayoutChange: function onLayoutChange() {},\n\t      onDragStart: function onDragStart() {},\n\t      onDrag: function onDrag() {},\n\t      onDragStop: function onDragStop() {},\n\t      onResizeStart: function onResizeStart() {},\n\t      onResize: function onResize() {},\n\t      onResizeStop: function onResizeStop() {}\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      layout: utils.synchronizeLayoutWithChildren(this.props.layout, this.props.children, this.props.cols),\n\t      width: this.props.initialWidth,\n\t      activeDrag: null\n\t    };\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t    // Call back with layout on mount. This should be done after correcting the layout width\n\t    // to ensure we don't rerender with the wrong width.\n\t    this.props.onLayoutChange(this.state.layout);\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    // This allows you to set the width manually if you like.\n\t    // Use manual width changes in combination with `listenToWindowResize: false`\n\t    if (nextProps.width !== this.props.width) this.onWidthChange(nextProps.width);\n\t\n\t    // If children change, regenerate the layout.\n\t    if (nextProps.children.length !== this.props.children.length) {\n\t      this.setState({\n\t        layout: utils.synchronizeLayoutWithChildren(this.state.layout, nextProps.children, nextProps.cols)\n\t      });\n\t    }\n\t\n\t    // Allow parent to set layout directly.\n\t    if (nextProps.layout && JSON.stringify(nextProps.layout) !== JSON.stringify(this.state.layout)) {\n\t      this.setState({\n\t        layout: utils.synchronizeLayoutWithChildren(nextProps.layout, nextProps.children, nextProps.cols)\n\t      });\n\t    }\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {\n\t    // Call back so we can store the layout\n\t    // Do it only when a resize/drag is not active, otherwise there are way too many callbacks\n\t    if (this.state.layout !== prevState.layout && !this.state.activeDrag) {\n\t      this.props.onLayoutChange(this.state.layout, this.state.layouts);\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Calculates a pixel value for the container.\n\t   * @return {String} Container height in pixels.\n\t   */\n\t  containerHeight: function containerHeight() {\n\t    if (!this.props.autoSize) {\n\t      return;\n\t    }return utils.bottom(this.state.layout) * this.props.rowHeight + this.props.margin[1] + \"px\";\n\t  },\n\t\n\t  /**\n\t   * When the width changes, save it to state. This helps with left/width calculations.\n\t   */\n\t  onWidthChange: function onWidthChange(width) {\n\t    this.setState({ width: width });\n\t  },\n\t\n\t  /**\n\t   * When dragging starts\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDragStart: function onDragStart(i, x, y, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var position = _ref.position;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t\n\t    // No need to clone, `l` hasn't changed.\n\t    this.props.onDragStart(layout, l, l, null, e);\n\t  },\n\t  /**\n\t   * Each drag movement create a new dragelement and move the element to the dragged location\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information   \n\t   */\n\t  onDrag: function onDrag(i, x, y, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var position = _ref.position;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    // Clone layout item so we can pass it to the callback.\n\t    var oldL = utils.clone(l);\n\t\n\t    // Create placeholder (display only)\n\t    var placeholder = {\n\t      w: l.w, h: l.h, x: l.x, y: l.y, placeholder: true, i: i\n\t    };\n\t\n\t    // Move the element to the dragged location.\n\t    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\t\n\t    this.props.onDrag(layout, oldL, l, placeholder, e);\n\t\n\t    this.setState({\n\t      layout: utils.compact(layout),\n\t      activeDrag: placeholder\n\t    });\n\t  },\n\t\n\t  /**\n\t   * When dragging stops, figure out which position the element is closest to and update its x and y.\n\t   * @param  {Number} i Index of the child.\n\t   * @param {Number} i Index of the child\n\t   * @param {Number} x X position of the move\n\t   * @param {Number} y Y position of the move\n\t   * @param {Event} e The mousedown event\n\t   * @param {Element} element The current dragging DOM element\n\t   * @param {Object} position Drag information\n\t   */\n\t  onDragStop: function onDragStop(i, x, y, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var position = _ref.position;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = utils.clone(l);\n\t\n\t    // Move the element here\n\t    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\t\n\t    this.props.onDragStop(layout, oldL, l, null, e);\n\t\n\t    // Set state\n\t    this.setState({ layout: utils.compact(layout), activeDrag: null });\n\t  },\n\t\n\t  onResizeStart: function onResizeStart(i, w, h, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var size = _ref.size;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t\n\t    // No need to clone, item hasn't changed\n\t    this.props.onResizeStart(layout, l, l, null, e);\n\t  },\n\t\n\t  onResize: function onResize(i, w, h, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var size = _ref.size;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = utils.clone(l);\n\t\n\t    // Set new width and height.\n\t    l.w = w;\n\t    l.h = h;\n\t\n\t    // Create placeholder element (display only)\n\t    var placeholder = {\n\t      w: w, h: h, x: l.x, y: l.y, placeholder: true, i: i\n\t    };\n\t\n\t    this.props.onResize(layout, oldL, l, placeholder, e);\n\t\n\t    // Re-compact the layout and set the drag placeholder.\n\t    this.setState({ layout: utils.compact(layout), activeDrag: placeholder });\n\t  },\n\t\n\t  onResizeStop: function onResizeStop(i, x, y, _ref) {\n\t    var e = _ref.e;\n\t    var element = _ref.element;\n\t    var size = _ref.size;\n\t\n\t    var layout = this.state.layout;\n\t    var l = utils.getLayoutItem(layout, i);\n\t    var oldL = utils.clone(l);\n\t\n\t    this.props.onResizeStop(layout, oldL, l, null, e);\n\t\n\t    this.setState({ activeDrag: null, layout: utils.compact(layout) });\n\t  },\n\t\n\t  /**\n\t   * Create a placeholder object.\n\t   * @return {Element} Placeholder div.\n\t   */\n\t  placeholder: function placeholder() {\n\t    if (!this.state.activeDrag) {\n\t      return \"\";\n\t    } // {...this.state.activeDrag} is pretty slow, actually\n\t    return React.createElement(\n\t      GridItem,\n\t      {\n\t        w: this.state.activeDrag.w,\n\t        h: this.state.activeDrag.h,\n\t        x: this.state.activeDrag.x,\n\t        y: this.state.activeDrag.y,\n\t        i: this.state.activeDrag.i,\n\t        isPlaceholder: true,\n\t        className: \"react-grid-placeholder\",\n\t        containerWidth: this.state.width,\n\t        cols: this.props.cols,\n\t        margin: this.props.margin,\n\t        rowHeight: this.props.rowHeight,\n\t        isDraggable: false,\n\t        isResizable: false,\n\t        useCSSTransforms: this.props.useCSSTransforms\n\t      },\n\t      React.createElement(\"div\", null)\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Given a grid item, set its style attributes & surround in a <Draggable>.\n\t   * @param  {Element} child React element.\n\t   * @param  {Number}  i     Index of element.\n\t   * @return {Element}       Element wrapped in draggable and properly placed.\n\t   */\n\t  processGridItem: function processGridItem(child) {\n\t    var i = child.key;\n\t    var l = utils.getLayoutItem(this.state.layout, i);\n\t\n\t    // watchStart property tells Draggable to react to changes in the start param\n\t    // Must be turned off on the item we're dragging as the changes in `activeDrag` cause rerenders\n\t    var drag = this.state.activeDrag;\n\t    var moveOnStartChange = drag && drag.i === i ? false : true;\n\t\n\t    // Parse 'static'. Any properties defined directly on the grid item will take precedence.\n\t    var draggable, resizable;\n\t    if (l[\"static\"] || this.props.isDraggable === false) draggable = false;\n\t    if (l[\"static\"] || this.props.isResizable === false) resizable = false;\n\t\n\t    return React.createElement(\n\t      GridItem,\n\t      _extends({\n\t        containerWidth: this.state.width,\n\t        cols: this.props.cols,\n\t        margin: this.props.margin,\n\t        rowHeight: this.props.rowHeight,\n\t        moveOnStartChange: moveOnStartChange,\n\t        cancel: this.props.draggableCancel,\n\t        handle: this.props.draggableHandle,\n\t        onDragStop: this.onDragStop,\n\t        onDragStart: this.onDragStart,\n\t        onDrag: this.onDrag,\n\t        onResizeStart: this.onResizeStart,\n\t        onResize: this.onResize,\n\t        onResizeStop: this.onResizeStop,\n\t        isDraggable: draggable,\n\t        isResizable: resizable,\n\t        useCSSTransforms: this.props.useCSSTransforms && this.isMounted(),\n\t        usePercentages: !this.isMounted()\n\t      }, l),\n\t      child\n\t    );\n\t  },\n\t\n\t  render: function render() {\n\t    // Calculate classname\n\t    var _props = this.props;\n\t    var className = _props.className;\n\t\n\t    var props = _objectWithoutProperties(_props, [\"className\"]);\n\t\n\t    className = \"react-grid-layout \" + (className || \"\");\n\t\n\t    return React.createElement(\n\t      \"div\",\n\t      _extends({}, props, { className: className, style: { height: this.containerHeight() } }),\n\t      React.Children.map(this.props.children, this.processGridItem),\n\t      this.placeholder()\n\t    );\n\t  }\n\t});\n\t\n\tmodule.exports = ReactGridLayout;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(1);\n\t\n\t/**\n\t * A simple mixin that provides facility for listening to container resizes.\n\t */\n\tvar WidthListeningMixin = {\n\t\n\t  propTypes: {\n\t    // This allows setting this on the server side\n\t    initialWidth: React.PropTypes.number,\n\t\n\t    // If false, you should supply width yourself. Good if you want to debounce resize events\n\t    // or reuse a handler from somewhere else.\n\t    listenToWindowResize: React.PropTypes.bool\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      initialWidth: 1280,\n\t      listenToWindowResize: true\n\t    };\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t    if (this.props.listenToWindowResize) {\n\t      window.addEventListener(\"resize\", this.onWindowResize);\n\t      // This is intentional. Once to properly set the breakpoint and resize the elements,\n\t      // and again to compensate for any scrollbar that appeared because of the first step.\n\t      this.onWindowResize();\n\t      this.onWindowResize();\n\t    }\n\t  },\n\t\n\t  componentWillUnmount: function componentWillUnmount() {\n\t    window.removeEventListener(\"resize\", this.onWindowResize);\n\t  },\n\t\n\t  /**\n\t   * On window resize, update width.\n\t   */\n\t  onWindowResize: function onWindowResize() {\n\t    this.onWidthChange(this.getDOMNode().offsetWidth);\n\t  }\n\t\n\t};\n\t\n\tmodule.exports = WidthListeningMixin;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tfunction ToObject(val) {\n\t\tif (val == null) {\n\t\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t\t}\n\t\n\t\treturn Object(val);\n\t}\n\t\n\tmodule.exports = Object.assign || function (target, source) {\n\t\tvar from;\n\t\tvar keys;\n\t\tvar to = ToObject(target);\n\t\n\t\tfor (var s = 1; s < arguments.length; s++) {\n\t\t\tfrom = arguments[s];\n\t\t\tkeys = Object.keys(Object(from));\n\t\n\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\tto[keys[i]] = from[keys[i]];\n\t\t\t}\n\t\t}\n\t\n\t\treturn to;\n\t};\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(1);\n\tvar Draggable = __webpack_require__(23);\n\tvar assign = __webpack_require__(10);\n\tvar PureRenderMixin = __webpack_require__(3);\n\tvar cloneWithProps = __webpack_require__(4);\n\t\n\tvar Resizable = module.exports = React.createClass({\n\t  displayName: \"Resizable\",\n\t  mixins: [PureRenderMixin],\n\t\n\t  propTypes: {\n\t    children: React.PropTypes.element,\n\t    // Functions\n\t    onResizeStop: React.PropTypes.func,\n\t    onResizeStart: React.PropTypes.func,\n\t    onResize: React.PropTypes.func,\n\t\n\t    width: React.PropTypes.number.isRequired,\n\t    height: React.PropTypes.number.isRequired,\n\t    // If you change this, be sure to update your css\n\t    handleSize: React.PropTypes.array,\n\t    // These will be passed wholesale to react-draggable\n\t    draggableOpts: React.PropTypes.object\n\t  },\n\t\n\t  getDefaultProps: function () {\n\t    return {\n\t      handleSize: [20, 20]\n\t    };\n\t  },\n\t\n\t  minConstraints: function () {\n\t    return parseConstraints(this.props.minConstraints, this.props.handleSize[0]) || this.props.handleSize;\n\t  },\n\t\n\t  maxConstraints: function () {\n\t    return parseConstraints(this.props.maxConstraints, this.props.handleSize[1]);\n\t  },\n\t\n\t\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   * \n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  resizeHandler: function (handlerName) {\n\t    var me = this;\n\t    return function (e, _ref) {\n\t      var element = _ref.element;\n\t      var position = _ref.position;\n\t      me.props[handlerName] && me.props[handlerName](e, { element: element, size: calcWH(position, me.props.handleSize) });\n\t    };\n\t  },\n\t\n\t  render: function () {\n\t    var p = this.props;\n\t    // What we're doing here is getting the child of this element, and cloning it with this element's props.\n\t    // We are then defining its children as:\n\t    // Its original children (resizable's child's children), and\n\t    // A draggable handle.\n\t\n\t    return cloneWithProps(p.children, assign({}, p, {\n\t      children: [p.children.props.children, React.createElement(Draggable, React.__spread({}, p.draggableOpts, {\n\t        start: { x: p.width - 20, y: p.height - 20 },\n\t        moveOnStartChange: true,\n\t        onStop: this.resizeHandler(\"onResizeStop\"),\n\t        onStart: this.resizeHandler(\"onResizeStart\"),\n\t        onDrag: this.resizeHandler(\"onResize\"),\n\t        minConstraints: this.minConstraints(),\n\t        maxConstraints: this.maxConstraints()\n\t      }), React.createElement(\"span\", {\n\t        className: \"react-resizable-handle\"\n\t      }))]\n\t    }));\n\t  }\n\t});\n\t\n\t/**\n\t * Parse left and top coordinates; we have to add the handle size to get the full picture.\n\t * @param  {Number} options.left Left coordinate.\n\t * @param  {Number} options.top  Top coordinate.\n\t * @param  {Array}  handleSize   Handle data.\n\t * @return {Object}              Coordinates\n\t */\n\tfunction calcWH(_ref2, handleSize) {\n\t  var left = _ref2.left;\n\t  var top = _ref2.top;\n\t  return { width: left + handleSize[0], height: top + handleSize[1] };\n\t}\n\t\n\t/**\n\t * Constraints must be subtracted by the size of the handle to work properly.\n\t * This has a side-effect of effectively limiting the minimum size to the handleSize,\n\t * which IMO is fine.\n\t * @param  {Array} constraints Constraints array.\n\t * @param  {Array} handleSize  Handle size array.\n\t * @return {Array}             Transformed constraints.\n\t */\n\tfunction parseConstraints(constraints, handleSize) {\n\t  if (!constraints) return;\n\t  return constraints.map(function (c) {\n\t    return c - handleSize;\n\t  });\n\t}\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule Object.assign\n\t */\n\t\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign\n\t\n\tfunction assign(target, sources) {\n\t  if (target == null) {\n\t    throw new TypeError('Object.assign target cannot be null or undefined');\n\t  }\n\t\n\t  var to = Object(target);\n\t  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\t\n\t  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {\n\t    var nextSource = arguments[nextIndex];\n\t    if (nextSource == null) {\n\t      continue;\n\t    }\n\t\n\t    var from = Object(nextSource);\n\t\n\t    // We don't currently support accessors nor proxies. Therefore this\n\t    // copy cannot throw. If we ever supported this then we must handle\n\t    // exceptions and side-effects. We don't support symbols so they won't\n\t    // be transferred.\n\t\n\t    for (var key in from) {\n\t      if (hasOwnProperty.call(from, key)) {\n\t        to[key] = from[key];\n\t      }\n\t    }\n\t  }\n\t\n\t  return to;\n\t};\n\t\n\tmodule.exports = assign;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar React = __webpack_require__(1);\n\tvar cloneWithProps = __webpack_require__(4);\n\tvar utils = __webpack_require__(2);\n\tvar Draggable = __webpack_require__(19);\n\tvar Resizable = __webpack_require__(22).Resizable;\n\tvar PureDeepRenderMixin = __webpack_require__(6);\n\t\n\t/**\n\t * An individual item within a ReactGridLayout.\n\t */\n\tvar GridItem = React.createClass({\n\t  displayName: \"GridItem\",\n\t\n\t  mixins: [PureDeepRenderMixin],\n\t\n\t  propTypes: {\n\t    // General grid attributes\n\t    cols: React.PropTypes.number.isRequired,\n\t    containerWidth: React.PropTypes.number.isRequired,\n\t    rowHeight: React.PropTypes.number.isRequired,\n\t    margin: React.PropTypes.array.isRequired,\n\t\n\t    // These are all in grid units\n\t    x: React.PropTypes.number.isRequired,\n\t    y: React.PropTypes.number.isRequired,\n\t    w: React.PropTypes.number.isRequired,\n\t    h: React.PropTypes.number.isRequired,\n\t\n\t    // All optional\n\t    minW: function minW(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.minW > props.w || props.minW > props.maxW) constraintError(\"minW\", props);\n\t    },\n\t    maxW: function maxW(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.maxW < props.w || props.maxW < props.minW) constraintError(\"maxW\", props);\n\t    },\n\t    minH: function minH(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.minH > props.h || props.minH > props.maxH) constraintError(\"minH\", props);\n\t    },\n\t    maxH: function maxH(props, propName, componentName) {\n\t      React.PropTypes.number.apply(this, arguments);\n\t      if (props.maxH < props.h || props.maxH < props.minH) constraintError(\"maxH\", props);\n\t    },\n\t\n\t    // ID is nice to have for callbacks\n\t    i: React.PropTypes.string.isRequired,\n\t\n\t    // If true, item will be repositioned when x/y/w/h change\n\t    moveOnStartChange: React.PropTypes.bool,\n\t\n\t    // Functions\n\t    onDragStop: React.PropTypes.func,\n\t    onDragStart: React.PropTypes.func,\n\t    onDrag: React.PropTypes.func,\n\t    onResizeStop: React.PropTypes.func,\n\t    onResizeStart: React.PropTypes.func,\n\t    onResize: React.PropTypes.func,\n\t\n\t    // Flags\n\t    isDraggable: React.PropTypes.bool,\n\t    isResizable: React.PropTypes.bool,\n\t    // Use CSS transforms instead of top/left\n\t    useCSSTransforms: React.PropTypes.bool,\n\t    isPlaceholder: React.PropTypes.bool,\n\t\n\t    // Others\n\t    className: React.PropTypes.string,\n\t    // Selector for draggable handle\n\t    handle: React.PropTypes.string,\n\t    // Selector for draggable cancel (see react-draggable)\n\t    cancel: React.PropTypes.string\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      isDraggable: true,\n\t      isResizable: true,\n\t      useCSSTransforms: true,\n\t      className: \"\",\n\t      cancel: \"\",\n\t      minH: 1,\n\t      minW: 1,\n\t      maxH: Infinity,\n\t      maxW: Infinity\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      resizing: false,\n\t      className: \"\"\n\t    };\n\t  },\n\t\n\t  /**\n\t   * Return position on the page given an x, y, w, h.\n\t   * left, top, width, height are all in pixels.\n\t   * @param  {Number}  x             X coordinate in grid units.\n\t   * @param  {Number}  y             Y coordinate in grid units.\n\t   * @param  {Number}  w             W coordinate in grid units.\n\t   * @param  {Number}  h             H coordinate in grid units.\n\t   * @return {Object}                Object containing coords.\n\t   */\n\t  calcPosition: function calcPosition(x, y, w, h) {\n\t    var p = this.props;\n\t    var width = p.containerWidth - p.margin[0];\n\t    var out = {\n\t      left: width * (x / p.cols) + p.margin[0],\n\t      top: p.rowHeight * y + p.margin[1],\n\t      width: width * (w / p.cols) - p.margin[0],\n\t      height: h * p.rowHeight - p.margin[1]\n\t    };\n\t    return out;\n\t  },\n\t\n\t  /**\n\t   * Translate x and y coordinates from pixels to grid units.\n\t   * @param  {Number} options.left  Left offset in pixels.\n\t   * @param  {Number} options.top   Top offset in pixels.\n\t   * @return {Object}               x and y in grid units.\n\t   */\n\t  calcXY: function calcXY(_ref) {\n\t    var left = _ref.left;\n\t    var top = _ref.top;\n\t\n\t    left = left - this.props.margin[0];\n\t    top = top - this.props.margin[1];\n\t    // This is intentional; because so much of the logic on moving boxes up/down relies\n\t    // on an exact y position, we only round the x, not the y.\n\t    var x = Math.round(left / this.props.containerWidth * this.props.cols);\n\t    var y = Math.floor(top / this.props.rowHeight);\n\t    x = Math.max(Math.min(x, this.props.cols), 0);\n\t    y = Math.max(y, 0);\n\t    return { x: x, y: y };\n\t  },\n\t\n\t  /**\n\t   * Given a height and width in pixel values, calculate grid units.\n\t   * @param  {Number} options.height Height in pixels.\n\t   * @param  {Number} options.width  Width in pixels.\n\t   * @return {Object}                w, h as grid units.\n\t   */\n\t  calcWH: function calcWH(_ref) {\n\t    var height = _ref.height;\n\t    var width = _ref.width;\n\t\n\t    width = width + this.props.margin[0];\n\t    height = height + this.props.margin[1];\n\t    var w = Math.round(width / this.props.containerWidth * this.props.cols);\n\t    var h = Math.round(height / this.props.rowHeight);\n\t    w = Math.max(Math.min(w, this.props.cols - this.props.x), 0);\n\t    h = Math.max(h, 0);\n\t    return { w: w, h: h };\n\t  },\n\t\n\t  /**\n\t   * Mix a Draggable instance into a child.\n\t   * @param  {Element} child    Child element.\n\t   * @param  {Object} position  Position object (pixel values)\n\t   * @return {Element}          Child wrapped in Draggable.\n\t   */\n\t  mixinDraggable: function mixinDraggable(child, position) {\n\t    return React.createElement(\n\t      Draggable,\n\t      {\n\t        start: { x: position.left, y: position.top },\n\t        moveOnStartChange: this.props.moveOnStartChange,\n\t        onStop: this.onDragHandler(\"onDragStop\"),\n\t        onStart: this.onDragHandler(\"onDragStart\"),\n\t        onDrag: this.onDragHandler(\"onDrag\"),\n\t        handle: this.props.handle,\n\t        cancel: \".react-resizable-handle \" + this.props.cancel,\n\t        useCSSTransforms: this.props.useCSSTransforms\n\t      },\n\t      child\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Mix a Resizable instance into a child.\n\t   * @param  {Element} child    Child element.\n\t   * @param  {Object} position  Position object (pixel values)\n\t   * @return {Element}          Child wrapped in Resizable.\n\t   */\n\t  mixinResizable: function mixinResizable(child, position) {\n\t    var p = this.props;\n\t    // This is the max possible width - doesn't go to infinity because of the width of the window\n\t    var maxWidth = this.calcPosition(0, 0, p.cols - p.x, 0).width;\n\t\n\t    // Calculate min/max constraints using our min & maxes\n\t    var mins = this.calcPosition(0, 0, p.minW, p.minH);\n\t    var maxes = this.calcPosition(0, 0, p.maxW, p.maxH);\n\t    var minConstraints = [mins.width, mins.height];\n\t    var maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n\t    return React.createElement(\n\t      Resizable,\n\t      {\n\t        width: position.width,\n\t        height: position.height,\n\t        minConstraints: minConstraints,\n\t        maxConstraints: maxConstraints,\n\t        onResizeStop: this.onResizeHandler(\"onResizeStop\"),\n\t        onResizeStart: this.onResizeHandler(\"onResizeStart\"),\n\t        onResize: this.onResizeHandler(\"onResize\")\n\t      },\n\t      child\n\t    );\n\t  },\n\t\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   * All drag events call the function with the given handler name,\n\t   * with the signature (index, x, y).\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  onDragHandler: function onDragHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref) {\n\t      var element = _ref.element;\n\t      var position = _ref.position;\n\t\n\t      if (!me.props[handlerName]) return;\n\t      // Get new XY\n\t\n\t      var _me$calcXY = me.calcXY(position);\n\t\n\t      var x = _me$calcXY.x;\n\t      var y = _me$calcXY.y;\n\t\n\t      // Cap x at numCols\n\t      x = Math.min(x, me.props.cols - me.props.w);\n\t\n\t      me.props[handlerName](me.props.i, x, y, { e: e, element: element, position: position });\n\t    };\n\t  },\n\t\n\t  /**\n\t   * Wrapper around drag events to provide more useful data.\n\t   * All drag events call the function with the given handler name,\n\t   * with the signature (index, x, y).\n\t   *\n\t   * @param  {String} handlerName Handler name to wrap.\n\t   * @return {Function}           Handler function.\n\t   */\n\t  onResizeHandler: function onResizeHandler(handlerName) {\n\t    var me = this;\n\t    return function (e, _ref) {\n\t      var element = _ref.element;\n\t      var size = _ref.size;\n\t\n\t      if (!me.props[handlerName]) return;\n\t\n\t      // Get new XY\n\t\n\t      var _me$calcWH = me.calcWH(size);\n\t\n\t      var w = _me$calcWH.w;\n\t      var h = _me$calcWH.h;\n\t\n\t      // Cap w at numCols\n\t      w = Math.min(w, me.props.cols - me.props.x);\n\t      // Ensure w is at least 1\n\t      w = Math.max(w, 1);\n\t\n\t      // Min/max capping\n\t      w = Math.max(Math.min(w, me.props.maxW), me.props.minW);\n\t      h = Math.max(Math.min(h, me.props.maxH), me.props.minH);\n\t\n\t      me.setState({ resizing: handlerName === \"onResizeStop\" ? null : size });\n\t\n\t      me.props[handlerName](me.props.i, w, h, { e: e, element: element, size: size });\n\t    };\n\t  },\n\t\n\t  render: function render() {\n\t    var p = this.props,\n\t        pos = this.calcPosition(p.x, p.y, p.w, p.h);\n\t    if (this.state.resizing) {\n\t      pos.width = this.state.resizing.width;\n\t      pos.height = this.state.resizing.height;\n\t    }\n\t\n\t    var child = cloneWithProps(React.Children.only(this.props.children), {\n\t      // Munge a classname. Use passed in classnames and resizing.\n\t      // React with merge the classNames.\n\t      className: [\"react-grid-item\", this.props.className, this.state.resizing ? \"resizing\" : \"\", this.props.useCSSTransforms ? \"cssTransforms\" : \"\"].join(\" \"),\n\t      // We can set the width and height on the child, but unfortunately we can't set the position.\n\t      style: {\n\t        width: pos.width + \"px\",\n\t        height: pos.height + \"px\",\n\t        left: pos.left + \"px\",\n\t        top: pos.top + \"px\",\n\t        position: \"absolute\"\n\t      }\n\t    });\n\t\n\t    // This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n\t    // well when server rendering, and the only way to do that properly is to use percentage width/left because\n\t    // we don't know exactly what the browser viewport is.\n\t    //\n\t    // Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n\t    // left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n\t\n\t    // This is used for server rendering.\n\t    if (this.props.usePercentages) {\n\t      pos.left = utils.perc(pos.left / p.containerWidth);\n\t      child.props.style.left = pos.left;\n\t      child.props.style.width = utils.perc(pos.width / p.containerWidth);\n\t    }\n\t\n\t    // CSS Transforms support\n\t    if (this.props.useCSSTransforms) {\n\t      utils.setTransform(child.props.style, [pos.left, pos.top]);\n\t      delete child.props.style.left;\n\t      delete child.props.style.top;\n\t    }\n\t\n\t    // Resizable support. This is usually on but the user can toggle it off.\n\t    if (this.props.isResizable) {\n\t      child = this.mixinResizable(child, pos);\n\t    }\n\t\n\t    // Draggable support. This is always on, except for with placeholders.\n\t    if (this.props.isDraggable) {\n\t      child = this.mixinDraggable(child, pos);\n\t    }\n\t\n\t    return child;\n\t  }\n\t});\n\t\n\tfunction constraintError(name, props) {\n\t  delete props.children;\n\t  throw new Error(name + \" overrides contraints on gridItem \" + props.i + \". Full props: \" + JSON.stringify(props));\n\t}\n\t\n\tmodule.exports = GridItem;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar React = __webpack_require__(1);\n\tvar utils = __webpack_require__(2);\n\tvar responsiveUtils = __webpack_require__(15);\n\tvar PureDeepRenderMixin = __webpack_require__(6);\n\tvar WidthListeningMixin = __webpack_require__(9);\n\tvar ReactGridLayout = __webpack_require__(8);\n\t\n\t/**\n\t * A wrapper around ReactGridLayout to support responsive breakpoints.\n\t */\n\tvar ResponsiveReactGridLayout = React.createClass({\n\t  displayName: \"ResponsiveReactGridLayout\",\n\t\n\t  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\t\n\t  propTypes: {\n\t    //\n\t    // Basic props\n\t    //\n\t\n\t    // Optional, but if you are managing width yourself you may want to set the breakpoint\n\t    // yourself as well.\n\t    breakpoint: React.PropTypes.string,\n\t\n\t    // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\n\t    breakpoints: React.PropTypes.object,\n\t\n\t    // # of cols. This is a breakpoint -> cols map\n\t    cols: React.PropTypes.object,\n\t\n\t    // layouts is an object mapping breakpoints to layouts.\n\t    // e.g. {lg: Layout, md: Layout, ...}\n\t    layouts: (function (_layouts) {\n\t      var _layoutsWrapper = function layouts(_x, _x2, _x3) {\n\t        return _layouts.apply(this, arguments);\n\t      };\n\t\n\t      _layoutsWrapper.toString = function () {\n\t        return _layouts.toString();\n\t      };\n\t\n\t      return _layoutsWrapper;\n\t    })(function (props, propName, componentName) {\n\t      React.PropTypes.object.isRequired.apply(this, arguments);\n\t\n\t      var layouts = props.layouts;\n\t      Object.keys(layouts).map(function (k) {\n\t        utils.validateLayout(layouts[k], \"layouts.\" + k);\n\t      });\n\t    }),\n\t\n\t    //\n\t    // Callbacks\n\t    //\n\t\n\t    // Calls back with breakpoint and new # cols\n\t    onBreakpointChange: React.PropTypes.func,\n\t\n\t    // Callback so you can save the layout.\n\t    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n\t    onLayoutChange: React.PropTypes.func\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n\t      cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n\t      layouts: {},\n\t      onBreakpointChange: function onBreakpointChange() {},\n\t      onLayoutChange: function onLayoutChange() {}\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    var breakpoint = this.props.breakpoint || responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, this.props.initialWidth);\n\t    var cols = responsiveUtils.getColsFromBreakpoint(breakpoint, this.props.cols);\n\t\n\t    // Get the initial layout. This can tricky; we try to generate one however possible if one doesn't exist\n\t    // for this layout.\n\t    var initialLayout = responsiveUtils.findOrGenerateResponsiveLayout(this.props.layouts, this.props.breakpoints, breakpoint, breakpoint, cols);\n\t\n\t    return {\n\t      layout: initialLayout,\n\t      // storage for layouts obsoleted by breakpoints\n\t      layouts: this.props.layouts || {},\n\t      breakpoint: breakpoint,\n\t      cols: cols,\n\t      width: this.props.initialWidth\n\t    };\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    // This allows you to set the width manually if you like.\n\t    // Use manual width changes in combination with `listenToWindowResize: false`\n\t    if (nextProps.width) this.onWidthChange(nextProps.width);\n\t\n\t    // Allow parent to set breakpoint directly.\n\t    if (nextProps.breakpoint !== this.props.breakpoint) {\n\t      this.onWidthChange(this.state.width);\n\t    }\n\t\n\t    // Allow parent to set layouts directly.\n\t    if (nextProps.layouts && nextProps.layouts !== this.state.layouts) {\n\t      // Since we're setting an entirely new layout object, we must generate a new responsive layout\n\t      // if one does not exist.\n\t      var newLayout = responsiveUtils.findOrGenerateResponsiveLayout(nextProps.layouts, nextProps.breakpoints, this.state.breakpoint, this.state.breakpoint, this.state.cols);\n\t\n\t      this.setState({\n\t        layouts: nextProps.layouts,\n\t        layout: newLayout\n\t      });\n\t    }\n\t  },\n\t\n\t  /**\n\t   * Bubble this up, add `layouts` object.\n\t   * @param  {Array} layout Layout from inner Grid.\n\t   */\n\t  onLayoutChange: function onLayoutChange(layout) {\n\t    this.state.layouts[this.state.breakpoint] = layout;\n\t    this.setState({ layout: layout, layouts: this.state.layouts });\n\t    this.props.onLayoutChange(layout, this.state.layouts);\n\t  },\n\t\n\t  /**\n\t   * When the width changes work through breakpoints and reset state with the new width & breakpoint.\n\t   * Width changes are necessary to figure out the widget widths.\n\t   */\n\t  onWidthChange: function onWidthChange(width) {\n\t    // Set new breakpoint\n\t    var newState = { width: width };\n\t    newState.breakpoint = this.props.breakpoint || responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, newState.width);\n\t    newState.cols = responsiveUtils.getColsFromBreakpoint(newState.breakpoint, this.props.cols);\n\t\n\t    // Breakpoint change\n\t    if (newState.cols !== this.state.cols) {\n\t\n\t      // Store the current layout\n\t      newState.layouts = this.state.layouts;\n\t      newState.layouts[this.state.breakpoint] = JSON.parse(JSON.stringify(this.state.layout));\n\t\n\t      // Find or generate a new one.\n\t      newState.layout = responsiveUtils.findOrGenerateResponsiveLayout(newState.layouts, this.props.breakpoints, newState.breakpoint, this.state.breakpoint, newState.cols);\n\t\n\t      // This adds missing items.\n\t      newState.layout = utils.synchronizeLayoutWithChildren(newState.layout, this.props.children, newState.cols);\n\t\n\t      // Store this new layout as well.\n\t      newState.layouts[newState.breakpoint] = newState.layout;\n\t\n\t      this.props.onBreakpointChange(newState.breakpoint, newState.cols);\n\t    }\n\t\n\t    this.setState(newState);\n\t  },\n\t\n\t  render: function render() {\n\t    // Don't pass responsive props to RGL.\n\t    /*jshint unused:false*/\n\t    var _props = this.props;\n\t    var layouts = _props.layouts;\n\t    var onBreakpointChange = _props.onBreakpointChange;\n\t    var breakpoints = _props.breakpoints;\n\t\n\t    var props = _objectWithoutProperties(_props, [\"layouts\", \"onBreakpointChange\", \"breakpoints\"]);\n\t\n\t    return React.createElement(\n\t      ReactGridLayout,\n\t      _extends({}, props, {\n\t        layout: this.state.layout,\n\t        cols: this.state.cols,\n\t        listenToWindowResize: false,\n\t        onLayoutChange: this.onLayoutChange,\n\t        width: this.state.width }),\n\t      this.props.children\n\t    );\n\t  }\n\t});\n\t\n\tmodule.exports = ResponsiveReactGridLayout;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar utils = __webpack_require__(2);\n\t\n\tvar responsiveUtils = module.exports = {\n\t\n\t  /**\n\t   * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n\t   *\n\t   * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n\t   * @param  {Number} width Screen width.\n\t   * @return {String}       Highest breakpoint that is less than width.\n\t   */\n\t  getBreakpointFromWidth: function getBreakpointFromWidth(breakpoints, width) {\n\t    var sorted = responsiveUtils.sortBreakpoints(breakpoints);\n\t    var matching = sorted[0];\n\t    for (var i = 1, len = sorted.length; i < len; i++) {\n\t      var breakpointName = sorted[i];\n\t      if (width > breakpoints[breakpointName]) matching = breakpointName;\n\t    }\n\t    return matching;\n\t  },\n\t\n\t  /**\n\t   * Given a breakpoint, get the # of cols set for it.\n\t   * @param  {String} breakpoint Breakpoint name.\n\t   * @param  {Object} cols       Map of breakpoints to cols.\n\t   * @return {Number}            Number of cols.\n\t   */\n\t  getColsFromBreakpoint: function getColsFromBreakpoint(breakpoint, cols) {\n\t    if (!cols[breakpoint]) {\n\t      throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n\t    }\n\t    return cols[breakpoint];\n\t  },\n\t\n\t  /**\n\t   * Given existing layouts and a new breakpoint, find or generate a new layout.\n\t   *\n\t   * This finds the layout above the new one and generates from it, if it exists.\n\t   *\n\t   * @param  {Array} layouts     Existing layouts.\n\t   * @param  {Array} breakpoints All breakpoints.\n\t   * @param  {String} breakpoint New breakpoint.\n\t   * @param  {String} breakpoint Last breakpoint (for fallback).\n\t   * @param  {Number} cols       Column count at new breakpoint.\n\t   * @return {Array}             New layout.\n\t   */\n\t  findOrGenerateResponsiveLayout: function findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols) {\n\t    // If it already exists, just return it.\n\t    if (layouts[breakpoint]) {\n\t      return layouts[breakpoint];\n\t    } // Find or generate the next layout\n\t    var layout = layouts[lastBreakpoint];\n\t    var breakpointsSorted = responsiveUtils.sortBreakpoints(breakpoints);\n\t    var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n\t    for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n\t      var b = breakpointsAbove[i];\n\t      if (layouts[b]) {\n\t        layout = layouts[b];\n\t        break;\n\t      }\n\t    }\n\t    layout = JSON.parse(JSON.stringify(layout || [])); // clone layout so we don't modify existing items\n\t    return utils.compact(utils.correctBounds(layout, { cols: cols }));\n\t  },\n\t\n\t  /**\n\t   * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n\t   * e.g. ['xxs', 'xs', 'sm', ...]\n\t   *\n\t   * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n\t   * @return {Array}              Sorted breakpoints.\n\t   */\n\t  sortBreakpoints: function sortBreakpoints(breakpoints) {\n\t    var keys = Object.keys(breakpoints);\n\t    return keys.sort(function (a, b) {\n\t      return breakpoints[a] - breakpoints[b];\n\t    });\n\t  }\n\t};\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar pSlice = Array.prototype.slice;\n\tvar objectKeys = __webpack_require__(18);\n\tvar isArguments = __webpack_require__(17);\n\t\n\tvar deepEqual = module.exports = function (actual, expected, opts) {\n\t  if (!opts) opts = {};\n\t  // 7.1. All identical values are equivalent, as determined by ===.\n\t  if (actual === expected) {\n\t    return true;\n\t\n\t  } else if (actual instanceof Date && expected instanceof Date) {\n\t    return actual.getTime() === expected.getTime();\n\t\n\t  // 7.3. Other pairs that do not both pass typeof value == 'object',\n\t  // equivalence is determined by ==.\n\t  } else if (typeof actual != 'object' && typeof expected != 'object') {\n\t    return opts.strict ? actual === expected : actual == expected;\n\t\n\t  // 7.4. For all other Object pairs, including Array objects, equivalence is\n\t  // determined by having the same number of owned properties (as verified\n\t  // with Object.prototype.hasOwnProperty.call), the same set of keys\n\t  // (although not necessarily the same order), equivalent values for every\n\t  // corresponding key, and an identical 'prototype' property. Note: this\n\t  // accounts for both named and indexed properties on Arrays.\n\t  } else {\n\t    return objEquiv(actual, expected, opts);\n\t  }\n\t}\n\t\n\tfunction isUndefinedOrNull(value) {\n\t  return value === null || value === undefined;\n\t}\n\t\n\tfunction isBuffer (x) {\n\t  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n\t  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n\t    return false;\n\t  }\n\t  if (x.length > 0 && typeof x[0] !== 'number') return false;\n\t  return true;\n\t}\n\t\n\tfunction objEquiv(a, b, opts) {\n\t  var i, key;\n\t  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n\t    return false;\n\t  // an identical 'prototype' property.\n\t  if (a.prototype !== b.prototype) return false;\n\t  //~~~I've managed to break Object.keys through screwy arguments passing.\n\t  //   Converting to array solves the problem.\n\t  if (isArguments(a)) {\n\t    if (!isArguments(b)) {\n\t      return false;\n\t    }\n\t    a = pSlice.call(a);\n\t    b = pSlice.call(b);\n\t    return deepEqual(a, b, opts);\n\t  }\n\t  if (isBuffer(a)) {\n\t    if (!isBuffer(b)) {\n\t      return false;\n\t    }\n\t    if (a.length !== b.length) return false;\n\t    for (i = 0; i < a.length; i++) {\n\t      if (a[i] !== b[i]) return false;\n\t    }\n\t    return true;\n\t  }\n\t  try {\n\t    var ka = objectKeys(a),\n\t        kb = objectKeys(b);\n\t  } catch (e) {//happens when one is a string literal and the other isn't\n\t    return false;\n\t  }\n\t  // having the same number of owned properties (keys incorporates\n\t  // hasOwnProperty)\n\t  if (ka.length != kb.length)\n\t    return false;\n\t  //the same set of keys (although not necessarily the same order),\n\t  ka.sort();\n\t  kb.sort();\n\t  //~~~cheap key test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    if (ka[i] != kb[i])\n\t      return false;\n\t  }\n\t  //equivalent values for every corresponding key, and\n\t  //~~~possibly expensive deep test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    key = ka[i];\n\t    if (!deepEqual(a[key], b[key], opts)) return false;\n\t  }\n\t  return typeof a === typeof b;\n\t}\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar supportsArgumentsClass = (function(){\n\t  return Object.prototype.toString.call(arguments)\n\t})() == '[object Arguments]';\n\t\n\texports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\t\n\texports.supported = supported;\n\tfunction supported(object) {\n\t  return Object.prototype.toString.call(object) == '[object Arguments]';\n\t};\n\t\n\texports.unsupported = unsupported;\n\tfunction unsupported(object){\n\t  return object &&\n\t    typeof object == 'object' &&\n\t    typeof object.length == 'number' &&\n\t    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n\t    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n\t    false;\n\t};\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = typeof Object.keys === 'function'\n\t  ? Object.keys : shim;\n\t\n\texports.shim = shim;\n\tfunction shim (obj) {\n\t  var keys = [];\n\t  for (var key in obj) keys.push(key);\n\t  return keys;\n\t}\n\n\n/***/ },\n/* 19 */\n[33, 20],\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar React = __webpack_require__(1);\n\tvar PureRenderMixin = __webpack_require__(3);\n\tvar emptyFunction = __webpack_require__(5);\n\tvar cloneWithProps = __webpack_require__(4);\n\t\n\tfunction createUIEvent(draggable) {\n\t\treturn {\n\t\t\telement: draggable.getDOMNode(),\n\t\t\tposition: {\n\t\t\t\ttop: (draggable._pendingState || draggable.state).clientY,\n\t\t\t\tleft: (draggable._pendingState || draggable.state).clientX\n\t\t\t}\n\t\t};\n\t}\n\t\n\tfunction canDragY(draggable) {\n\t\treturn draggable.props.axis === 'both' ||\n\t\t\t\tdraggable.props.axis === 'y';\n\t}\n\t\n\tfunction canDragX(draggable) {\n\t\treturn draggable.props.axis === 'both' ||\n\t\t\t\tdraggable.props.axis === 'x';\n\t}\n\t\n\tfunction isFunction(func) {\n\t  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n\t}\n\t\n\t// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\n\tfunction findInArray(array, callback) {\n\t  for (var i = 0, length = array.length, element = null; i < length, element = array[i]; i++) {\n\t    if (callback.apply(callback, [element, i, array])) return element;\n\t  }\n\t}\n\t\n\tfunction matchesSelector(el, selector) {\n\t  var method = findInArray([\n\t    'matches',\n\t    'webkitMatchesSelector',\n\t    'mozMatchesSelector',\n\t    'msMatchesSelector',\n\t    'oMatchesSelector'\n\t  ], function(method){\n\t    return isFunction(el[method]);\n\t  });\n\t\n\t  return el[method].call(el, selector);\n\t}\n\t\n\tfunction positionToCSSTransform(style) {\n\t\t// Replace unitless items with px\n\t\tvar x = ('' + style.left).replace(/(\\d)$/, '$1px');\n\t\tvar y = ('' + style.top).replace(/(\\d)$/, '$1px');\n\t\tstyle.transform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.WebkitTransform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.OTransform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.msTransform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.MozTransform = 'translate(' + x + ',' + y + ')';\n\t\tdelete style.left;\n\t\tdelete style.top;\n\t\treturn style;\n\t}\n\t\n\t// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886\n\t/* Conditional to fix node server side rendering of component */\n\tif (typeof window === 'undefined') {\n\t    // Do Node Stuff\n\t    var isTouchDevice = false;\n\t} else {\n\t    // Do Browser Stuff\n\t    var isTouchDevice = 'ontouchstart' in window || // works on most browsers\n\t      'onmsgesturechange' in window; // works on ie10 on ms surface\n\t}\n\t\n\t// look ::handleDragStart\n\t//function isMultiTouch(e) {\n\t//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1\n\t//}\n\t\n\t/**\n\t * simple abstraction for dragging events names\n\t * */\n\tvar dragEventFor = (function () {\n\t  var eventsFor = {\n\t    touch: {\n\t      start: 'touchstart',\n\t      move: 'touchmove',\n\t      end: 'touchend'\n\t    },\n\t    mouse: {\n\t      start: 'mousedown',\n\t      move: 'mousemove',\n\t      end: 'mouseup'\n\t    }\n\t  };\n\t  return eventsFor[isTouchDevice ? 'touch' : 'mouse'];\n\t})();\n\t\n\t/**\n\t * get {clientX, clientY} positions of control\n\t * */\n\tfunction getControlPosition(e) {\n\t  var position = (e.touches && e.touches[0]) || e;\n\t  return {\n\t    clientX: position.clientX,\n\t    clientY: position.clientY\n\t  };\n\t}\n\t\n\tfunction addEvent(el, event, handler) {\n\t\tif (!el) { return; }\n\t\tif (el.attachEvent) {\n\t\t\tel.attachEvent('on' + event, handler);\n\t\t} else if (el.addEventListener) {\n\t\t\tel.addEventListener(event, handler, true);\n\t\t} else {\n\t\t\tel['on' + event] = handler;\n\t\t}\n\t}\n\t\n\tfunction removeEvent(el, event, handler) {\n\t\tif (!el) { return; }\n\t\tif (el.detachEvent) {\n\t\t\tel.detachEvent('on' + event, handler);\n\t\t} else if (el.removeEventListener) {\n\t\t\tel.removeEventListener(event, handler, true);\n\t\t} else {\n\t\t\tel['on' + event] = null;\n\t\t}\n\t}\n\t\n\tmodule.exports = React.createClass({\n\t\tdisplayName: 'Draggable',\n\t\tmixins: [PureRenderMixin],\n\t\n\t\tpropTypes: {\n\t\t\t/**\n\t\t\t * `axis` determines which axis the draggable can move.\n\t\t\t *\n\t\t\t * 'both' allows movement horizontally and vertically.\n\t\t\t * 'x' limits movement to horizontal axis.\n\t\t\t * 'y' limits movement to vertical axis.\n\t\t\t *\n\t\t\t * Defaults to 'both'.\n\t\t\t */\n\t\t\taxis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\t\n\t\t\t/**\n\t\t\t * `handle` specifies a selector to be used as the handle that initiates drag.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t    \treturn (\n\t\t\t * \t    \t \t<Draggable handle=\".handle\">\n\t\t\t * \t    \t \t  <div>\n\t\t\t * \t    \t \t      <div className=\"handle\">Click me to drag</div>\n\t\t\t * \t    \t \t      <div>This is some other content</div>\n\t\t\t * \t    \t \t  </div>\n\t\t\t * \t    \t\t</Draggable>\n\t\t\t * \t    \t);\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\thandle: React.PropTypes.string,\n\t\n\t\t\t/**\n\t\t\t * `cancel` specifies a selector to be used to prevent drag initialization.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return(\n\t\t\t * \t            <Draggable cancel=\".cancel\">\n\t\t\t * \t                <div>\n\t\t\t * \t                \t<div className=\"cancel\">You can't drag from here</div>\n\t\t\t *\t\t\t\t\t\t<div>Dragging here works fine</div>\n\t\t\t * \t                </div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tcancel: React.PropTypes.string,\n\t\n\t\t\t/**\n\t\t\t * `grid` specifies the x and y that dragging should snap to.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable grid={[25, 25]}>\n\t\t\t * \t                <div>I snap to a 25 x 25 grid</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tgrid: React.PropTypes.arrayOf(React.PropTypes.number),\n\t\n\t\t\t/**\n\t\t\t * `start` specifies the x and y that the dragged item should start at\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable start={{x: 25, y: 25}}>\n\t\t\t * \t                <div>I start with left: 25px; top: 25px;</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tstart: React.PropTypes.object,\n\t\n\t\t\t/**\n\t\t\t * `moveOnStartChange` tells the Draggable element to reset its position\n\t\t\t * if the `start` parameters are changed. By default, if the `start` \n\t\t\t * parameters change, the Draggable element still remains where it started\n\t\t\t * or was dragged to.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t\t\tonButtonClick: function () {\n\t\t\t * \t\t\t\tthis.setState({clicked: true});\n\t\t\t * \t\t\t},\n\t\t\t * \t    render: function () {\n\t\t\t * \t    \t\tvar start = this.state.clicked ?\n\t\t\t * \t    \t\t  {x: 25, y: 25} :\n\t\t\t * \t    \t\t  {x: 125, y: 125};\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable start={start}>\n\t\t\t * \t                <div>I start with left: 25px; top: 25px;,\n\t\t\t * \t                but move to left: 125px; top: 125px; when the button\n\t\t\t * \t                is clicked.</div>\n\t\t\t * \t                <div onClick={this.onButtonClick}>Button</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tmoveOnStartChange: React.PropTypes.bool,\n\t\n\t\t\t/**\n\t\t\t * `useCSSTransforms` if true will place the element using translate(x, y)\n\t\t\t * rather than CSS top/left.\n\t\t\t *\n\t\t\t * This generally gives better performance, and is useful in combination with\n\t\t\t * other layout systems that use translate(), such as react-grid-layout.\n\t\t\t */\n\t\t\tuseCSSTransforms: React.PropTypes.bool,\n\t\n\t\t\t/**\n\t\t\t * `zIndex` specifies the zIndex to use while dragging.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable zIndex={100}>\n\t\t\t * \t                <div>I have a zIndex</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tzIndex: React.PropTypes.number,\n\t\n\t\t\t/**\n\t\t\t * Called when dragging starts.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\tfunction (event, ui) {}\n\t\t\t * ```\n\t\t\t *\n\t\t\t * `event` is the Event that was triggered.\n\t\t\t * `ui` is an object:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\t{\n\t\t\t *\t\tposition: {top: 0, left: 0}\n\t\t\t *\t}\n\t\t\t * ```\n\t\t\t */\n\t\t\tonStart: React.PropTypes.func,\n\t\n\t\t\t/**\n\t\t\t * Called while dragging.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\tfunction (event, ui) {}\n\t\t\t * ```\n\t\t\t *\n\t\t\t * `event` is the Event that was triggered.\n\t\t\t * `ui` is an object:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\t{\n\t\t\t *\t\tposition: {top: 0, left: 0}\n\t\t\t *\t}\n\t\t\t * ```\n\t\t\t */\n\t\t\tonDrag: React.PropTypes.func,\n\t\n\t\t\t/**\n\t\t\t * Called when dragging stops.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\tfunction (event, ui) {}\n\t\t\t * ```\n\t\t\t *\n\t\t\t * `event` is the Event that was triggered.\n\t\t\t * `ui` is an object:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\t{\n\t\t\t *\t\tposition: {top: 0, left: 0}\n\t\t\t *\t}\n\t\t\t * ```\n\t\t\t */\n\t\t\tonStop: React.PropTypes.func,\n\t\n\t\t\t/**\n\t\t\t * A workaround option which can be passed if onMouseDown needs to be accessed, \n\t\t\t * since it'll always be blocked (due to that there's internal use of onMouseDown)\n\t\t\t *\n\t\t\t */\n\t\t\tonMouseDown: React.PropTypes.func\n\t\t},\n\t\n\t\tcomponentWillUnmount: function() {\n\t\t\t// Remove any leftover event handlers\n\t\t\tremoveEvent(window, dragEventFor['move'], this.handleDrag);\n\t\t\tremoveEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t\t},\n\t\n\t\tcomponentWillReceiveProps: function(nextProps) {\n\t\t\t// If this is set to watch a changing start position, \n\t\t\t// set x and y to the new position.\n\t\t\tif (nextProps.moveOnStartChange) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tclientX: nextProps.start.x,\n\t\t\t\t\tclientY: nextProps.start.y\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\n\t\tgetDefaultProps: function () {\n\t\t\treturn {\n\t\t\t\taxis: 'both',\n\t\t\t\thandle: null,\n\t\t\t\tcancel: null,\n\t\t\t\tgrid: null,\n\t\t\t\tstart: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0\n\t\t\t\t},\n\t\t\t\tmoveOnStartChange: false,\n\t\t\t\tuseCSSTransforms: false,\n\t\t\t\tzIndex: NaN,\n\t\t\t\tonStart: emptyFunction,\n\t\t\t\tonDrag: emptyFunction,\n\t\t\t\tonStop: emptyFunction,\n\t\t\t\tonMouseDown: emptyFunction\n\t\t\t};\n\t\t},\n\t\n\t\tgetInitialState: function () {\n\t\t\treturn {\n\t\t\t\t// Whether or not currently dragging\n\t\t\t\tdragging: false,\n\t\n\t\t\t\t// Start top/left of this.getDOMNode()\n\t\t\t\tstartX: 0, startY: 0,\n\t\n\t\t\t\t// Offset between start top/left and mouse top/left\n\t\t\t\toffsetX: 0, offsetY: 0,\n\t\n\t\t\t\t// Current top/left of this.getDOMNode()\n\t\t\t\tclientX: this.props.start.x, clientY: this.props.start.y\n\t\t\t};\n\t\t},\n\t\n\t\thandleDragStart: function (e) {\n\t    // todo: write right implementation to prevent multitouch drag\n\t    // prevent multi-touch events\n\t    // if (isMultiTouch(e)) {\n\t    //     this.handleDragEnd.apply(e, arguments);\n\t    //     return\n\t    // }\n\t\n\t\t\t// Make it possible to attach event handlers on top of this one\n\t\t\tthis.props.onMouseDown(e);\n\t\n\t\t\t// Only catch left clicks, if clicking\n\t\t\tif (typeof e.button === \"number\" && e.button !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar node = this.getDOMNode();\n\t\n\t\t\t// Short circuit if handle or cancel prop was provided and selector doesn't match\n\t\t\tif ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n\t\t\t\t(this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t    var dragPoint = getControlPosition(e);\n\t\n\t\t\t// Initiate dragging\n\t\t\tthis.setState({\n\t\t\t\tdragging: true,\n\t\t\t\toffsetX: parseInt(dragPoint.clientX, 10),\n\t\t\t\toffsetY: parseInt(dragPoint.clientY, 10),\n\t\t\t\tstartX: parseInt(this.state.clientX, 10) || 0,\n\t\t\t\tstartY: parseInt(this.state.clientY, 10) || 0\n\t\t\t});\n\t\n\t\t\t// Add a class to the body to disable user-select. This prevents text from \n\t\t\t// being selected all over the page.\n\t\t\tdocument.body.className += \" react-draggable-active\";\n\t\n\t\t\t// Call event handler\n\t\t\tthis.props.onStart(e, createUIEvent(this));\n\t\n\t\t\t// Add event handlers\n\t\t\taddEvent(window, dragEventFor['move'], this.handleDrag);\n\t\t\taddEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t\t},\n\t\n\t\thandleDragEnd: function (e) {\n\t\t\t// Short circuit if not currently dragging\n\t\t\tif (!this.state.dragging) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Turn off dragging\n\t\t\tthis.setState({\n\t\t\t\tdragging: false\n\t\t\t});\n\t\n\t\t\t// Remove the body class used to disable user-select.\n\t\t\tdocument.body.className = document.body.className.replace(\" react-draggable-active\", \"\");\n\t\n\t\t\t// Call event handler\n\t\t\tthis.props.onStop(e, createUIEvent(this));\n\t\n\t\t\t// Remove event handlers\n\t    removeEvent(window, dragEventFor['move'], this.handleDrag);\n\t    removeEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t\t},\n\t\n\t\thandleDrag: function (e) {\n\t    var dragPoint = getControlPosition(e);\n\t\n\t\t\t// Calculate top and left\n\t    var clientX = (this.state.startX + (dragPoint.clientX - this.state.offsetX));\n\t    var clientY = (this.state.startY + (dragPoint.clientY - this.state.offsetY));\n\t\n\t\t\t// Snap to grid if prop has been provided\n\t\t\tif (Array.isArray(this.props.grid)) {\n\t\t\t\tvar directionX = clientX < parseInt(this.state.clientX, 10) ? -1 : 1;\n\t\t\t\tvar directionY = clientY < parseInt(this.state.clientY, 10) ? -1 : 1;\n\t\n\t\t\t\tclientX = Math.abs(clientX - parseInt(this.state.clientX, 10)) >= this.props.grid[0]\n\t\t\t\t\t\t? (parseInt(this.state.clientX, 10) + (this.props.grid[0] * directionX))\n\t\t\t\t\t\t: parseInt(this.state.clientX, 10);\n\t\n\t\t\t\tclientY = Math.abs(clientY - parseInt(this.state.clientY, 10)) >= this.props.grid[1]\n\t\t\t\t\t\t? (parseInt(this.state.clientY, 10) + (this.props.grid[1] * directionY))\n\t\t\t\t\t\t: parseInt(this.state.clientY, 10);\n\t\t\t}\n\t\n\t\t\t// Min/max constraints\n\t\t\tif (Array.isArray(this.props.minConstraints)) {\n\t\t\t\tclientX = Math.max(this.props.minConstraints[0], clientX);\n\t\t\t\tclientY = Math.max(this.props.minConstraints[1], clientY);\n\t\t\t}\n\t\t\tif (Array.isArray(this.props.maxConstraints)) {\n\t\t\t\tclientX = Math.min(this.props.maxConstraints[0], clientX);\n\t\t\t\tclientY = Math.min(this.props.maxConstraints[1], clientY);\n\t\t\t}\n\t\n\t\t\t// Update top and left\n\t\t\tthis.setState({\n\t\t\t\tclientX: clientX,\n\t\t\t\tclientY: clientY\n\t\t\t});\n\t\n\t\t\t// Call event handler\n\t\t\tthis.props.onDrag(e, createUIEvent(this));\n\t\t},\n\t\n\t\trender: function () {\n\t\t\tvar style = {\n\t\t\t\t// Set top if vertical drag is enabled\n\t\t\t\ttop: canDragY(this)\n\t\t\t\t\t? this.state.clientY\n\t\t\t\t\t: this.state.startY,\n\t\n\t\t\t\t// Set left if horizontal drag is enabled\n\t\t\t\tleft: canDragX(this)\n\t\t\t\t\t? this.state.clientX\n\t\t\t\t\t: this.state.startX\n\t\t\t};\n\t\n\t\t\tif (this.props.useCSSTransforms) {\n\t\t\t\tstyle = positionToCSSTransform(style);\n\t\t\t}\n\t\n\t\t\t// Set zIndex if currently dragging and prop has been provided\n\t\t\tif (this.state.dragging && !isNaN(this.props.zIndex)) {\n\t\t\t\tstyle.zIndex = this.props.zIndex;\n\t\t\t}\n\t\n\t\t\t// Reuse the child provided\n\t\t\t// This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t\t\treturn cloneWithProps(React.Children.only(this.props.children), {\n\t\t\t\tstyle: style,\n\t\t\t\tclassName: 'react-draggable' + (this.state.dragging ? ' react-draggable-dragging' : ''),\n\t\n\t\t\t\tonMouseDown: this.handleDragStart,\n\t\t\t\tonTouchStart: function(ev){\n\t        ev.preventDefault(); // prevent for scroll\n\t        return this.handleDragStart.apply(this, arguments);\n\t      }.bind(this),\n\t\n\t\t\t\tonMouseUp: this.handleDragEnd,\n\t\t\t\tonTouchEnd: this.handleDragEnd\n\t\t\t});\n\t\t}\n\t});\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _objectWithoutProperties = function (obj, keys) {\n\t  var target = {};\n\t  for (var i in obj) {\n\t    if (keys.indexOf(i) >= 0) continue;\n\t    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n\t    target[i] = obj[i];\n\t  }\n\t\n\t  return target;\n\t};\n\t\n\t\"use strict\";\n\tvar React = __webpack_require__(1);\n\tvar PureRenderMixin = __webpack_require__(3);\n\tvar Resizable = __webpack_require__(11);\n\t\n\t// An example use of Resizable.\n\tvar ResizableBox = module.exports = React.createClass({\n\t  displayName: \"ResizableBox\",\n\t  mixins: [PureRenderMixin],\n\t\n\t  propTypes: {},\n\t\n\t  getInitialState: function () {\n\t    return {\n\t      width: this.props.width,\n\t      height: this.props.height\n\t    };\n\t  },\n\t\n\t  onResize: function (event, _ref) {\n\t    var element = _ref.element;\n\t    var size = _ref.size;\n\t    if (size.width !== this.state.width || size.height !== this.state.height) {\n\t      this.setState({\n\t        width: size.width,\n\t        height: size.height\n\t      });\n\t    }\n\t  },\n\t\n\t  render: function () {\n\t    // Basic wrapper around a Resizable instance.\n\t    // If you use Resizable directly, you are responsible for updating the component\n\t    // with a new width and height.\n\t    var handleSize = this.props.handleSize;\n\t    var minConstraints = this.props.minConstraints;\n\t    var maxConstraints = this.props.maxConstraints;\n\t    var props = _objectWithoutProperties(this.props, [\"handleSize\", \"minConstraints\", \"maxConstraints\"]);\n\t\n\t    return React.createElement(Resizable, {\n\t      minConstraints: minConstraints,\n\t      maxConstraints: maxConstraints,\n\t      handleSize: handleSize,\n\t      width: this.state.width,\n\t      height: this.state.height,\n\t      onResize: this.onResize,\n\t      draggableOpts: this.props.draggableOpts\n\t    }, React.createElement(\"div\", React.__spread({\n\t      style: { width: this.state.width + \"px\", height: this.state.height + \"px\" }\n\t    }, props), this.props.children));\n\t  }\n\t});\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function() {\n\t  throw new Error(\"Don't instantiate Resizable directly! Use require('react-resizable').Resizable\");\n\t};\n\t\n\tmodule.exports.Resizable = __webpack_require__(11);\n\tmodule.exports.ResizableBox = __webpack_require__(21);\n\n\n/***/ },\n/* 23 */\n[33, 24],\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/** @jsx React.DOM */\n\tvar React = __webpack_require__(1);\n\tvar PureRenderMixin = __webpack_require__(3);\n\tvar emptyFunction = __webpack_require__(5);\n\tvar cloneWithProps = __webpack_require__(4);\n\t\n\tfunction createUIEvent(draggable) {\n\t\treturn {\n\t\t\telement: draggable.getDOMNode(),\n\t\t\tposition: {\n\t\t\t\ttop: (draggable._pendingState || draggable.state).clientY,\n\t\t\t\tleft: (draggable._pendingState || draggable.state).clientX\n\t\t\t}\n\t\t};\n\t}\n\t\n\tfunction canDragY(draggable) {\n\t\treturn draggable.props.axis === 'both' ||\n\t\t\t\tdraggable.props.axis === 'y';\n\t}\n\t\n\tfunction canDragX(draggable) {\n\t\treturn draggable.props.axis === 'both' ||\n\t\t\t\tdraggable.props.axis === 'x';\n\t}\n\t\n\tfunction isFunction(func) {\n\t  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n\t}\n\t\n\t// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\n\tfunction findInArray(array, callback) {\n\t  for (var i = 0, length = array.length, element = null; i < length, element = array[i]; i++) {\n\t    if (callback.apply(callback, [element, i, array])) return element;\n\t  }\n\t}\n\t\n\tfunction matchesSelector(el, selector) {\n\t  var method = findInArray([\n\t    'matches',\n\t    'webkitMatchesSelector',\n\t    'mozMatchesSelector',\n\t    'msMatchesSelector',\n\t    'oMatchesSelector'\n\t  ], function(method){\n\t    return isFunction(el[method]);\n\t  });\n\t\n\t  return el[method].call(el, selector);\n\t}\n\t\n\tfunction positionToCSSTransform(style) {\n\t\t// Replace unitless items with px\n\t\tvar x = ('' + style.left).replace(/(\\d)$/, '$1px');\n\t\tvar y = ('' + style.top).replace(/(\\d)$/, '$1px');\n\t\tstyle.transform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.WebkitTransform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.OTransform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.msTransform = 'translate(' + x + ',' + y + ')';\n\t\tstyle.MozTransform = 'translate(' + x + ',' + y + ')';\n\t\tdelete style.left;\n\t\tdelete style.top;\n\t\treturn style;\n\t}\n\t\n\t// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886\n\t/* Conditional to fix node server side rendering of component */\n\tif (typeof window === 'undefined') {\n\t    // Do Node Stuff\n\t    var isTouchDevice = false;\n\t} else {\n\t    // Do Browser Stuff\n\t    var isTouchDevice = 'ontouchstart' in window || // works on most browsers\n\t      'onmsgesturechange' in window; // works on ie10 on ms surface\n\t}\n\t\n\t// look ::handleDragStart\n\t//function isMultiTouch(e) {\n\t//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1\n\t//}\n\t\n\t/**\n\t * simple abstraction for dragging events names\n\t * */\n\tvar dragEventFor = (function () {\n\t  var eventsFor = {\n\t    touch: {\n\t      start: 'touchstart',\n\t      move: 'touchmove',\n\t      end: 'touchend'\n\t    },\n\t    mouse: {\n\t      start: 'mousedown',\n\t      move: 'mousemove',\n\t      end: 'mouseup'\n\t    }\n\t  };\n\t  return eventsFor[isTouchDevice ? 'touch' : 'mouse'];\n\t})();\n\t\n\t/**\n\t * get {clientX, clientY} positions of control\n\t * */\n\tfunction getControlPosition(e) {\n\t  var position = (e.touches && e.touches[0]) || e;\n\t  return {\n\t    clientX: position.clientX,\n\t    clientY: position.clientY\n\t  };\n\t}\n\t\n\tfunction addEvent(el, event, handler) {\n\t\tif (!el) { return; }\n\t\tif (el.attachEvent) {\n\t\t\tel.attachEvent('on' + event, handler);\n\t\t} else if (el.addEventListener) {\n\t\t\tel.addEventListener(event, handler, true);\n\t\t} else {\n\t\t\tel['on' + event] = handler;\n\t\t}\n\t}\n\t\n\tfunction removeEvent(el, event, handler) {\n\t\tif (!el) { return; }\n\t\tif (el.detachEvent) {\n\t\t\tel.detachEvent('on' + event, handler);\n\t\t} else if (el.removeEventListener) {\n\t\t\tel.removeEventListener(event, handler, true);\n\t\t} else {\n\t\t\tel['on' + event] = null;\n\t\t}\n\t}\n\t\n\tmodule.exports = React.createClass({\n\t\tdisplayName: 'Draggable',\n\t\tmixins: [PureRenderMixin],\n\t\n\t\tpropTypes: {\n\t\t\t/**\n\t\t\t * `axis` determines which axis the draggable can move.\n\t\t\t *\n\t\t\t * 'both' allows movement horizontally and vertically.\n\t\t\t * 'x' limits movement to horizontal axis.\n\t\t\t * 'y' limits movement to vertical axis.\n\t\t\t *\n\t\t\t * Defaults to 'both'.\n\t\t\t */\n\t\t\taxis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\t\n\t\t\t/**\n\t\t\t * `handle` specifies a selector to be used as the handle that initiates drag.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t    \treturn (\n\t\t\t * \t    \t \t<Draggable handle=\".handle\">\n\t\t\t * \t    \t \t  <div>\n\t\t\t * \t    \t \t      <div className=\"handle\">Click me to drag</div>\n\t\t\t * \t    \t \t      <div>This is some other content</div>\n\t\t\t * \t    \t \t  </div>\n\t\t\t * \t    \t\t</Draggable>\n\t\t\t * \t    \t);\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\thandle: React.PropTypes.string,\n\t\n\t\t\t/**\n\t\t\t * `cancel` specifies a selector to be used to prevent drag initialization.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return(\n\t\t\t * \t            <Draggable cancel=\".cancel\">\n\t\t\t * \t                <div>\n\t\t\t * \t                \t<div className=\"cancel\">You can't drag from here</div>\n\t\t\t *\t\t\t\t\t\t<div>Dragging here works fine</div>\n\t\t\t * \t                </div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tcancel: React.PropTypes.string,\n\t\n\t\t\t/**\n\t\t\t * `grid` specifies the x and y that dragging should snap to.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable grid={[25, 25]}>\n\t\t\t * \t                <div>I snap to a 25 x 25 grid</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tgrid: React.PropTypes.arrayOf(React.PropTypes.number),\n\t\n\t\t\t/**\n\t\t\t * `start` specifies the x and y that the dragged item should start at\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable start={{x: 25, y: 25}}>\n\t\t\t * \t                <div>I start with left: 25px; top: 25px;</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tstart: React.PropTypes.object,\n\t\n\t\t\t/**\n\t\t\t * `moveOnStartChange` tells the Draggable element to reset its position\n\t\t\t * if the `start` parameters are changed. By default, if the `start` \n\t\t\t * parameters change, the Draggable element still remains where it started\n\t\t\t * or was dragged to.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t\t\tonButtonClick: function () {\n\t\t\t * \t\t\t\tthis.setState({clicked: true});\n\t\t\t * \t\t\t},\n\t\t\t * \t    render: function () {\n\t\t\t * \t    \t\tvar start = this.state.clicked ?\n\t\t\t * \t    \t\t  {x: 25, y: 25} :\n\t\t\t * \t    \t\t  {x: 125, y: 125};\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable start={start}>\n\t\t\t * \t                <div>I start with left: 25px; top: 25px;,\n\t\t\t * \t                but move to left: 125px; top: 125px; when the button\n\t\t\t * \t                is clicked.</div>\n\t\t\t * \t                <div onClick={this.onButtonClick}>Button</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tmoveOnStartChange: React.PropTypes.bool,\n\t\n\t\t\t/**\n\t\t\t * `useCSSTransforms` if true will place the element using translate(x, y)\n\t\t\t * rather than CSS top/left.\n\t\t\t *\n\t\t\t * This generally gives better performance, and is useful in combination with\n\t\t\t * other layout systems that use translate(), such as react-grid-layout.\n\t\t\t */\n\t\t\tuseCSSTransforms: React.PropTypes.bool,\n\t\n\t\t\t/**\n\t\t\t * `zIndex` specifies the zIndex to use while dragging.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```jsx\n\t\t\t * \tvar App = React.createClass({\n\t\t\t * \t    render: function () {\n\t\t\t * \t        return (\n\t\t\t * \t            <Draggable zIndex={100}>\n\t\t\t * \t                <div>I have a zIndex</div>\n\t\t\t * \t            </Draggable>\n\t\t\t * \t        );\n\t\t\t * \t    }\n\t\t\t * \t});\n\t\t\t * ```\n\t\t\t */\n\t\t\tzIndex: React.PropTypes.number,\n\t\n\t\t\t/**\n\t\t\t * Called when dragging starts.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\tfunction (event, ui) {}\n\t\t\t * ```\n\t\t\t *\n\t\t\t * `event` is the Event that was triggered.\n\t\t\t * `ui` is an object:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\t{\n\t\t\t *\t\tposition: {top: 0, left: 0}\n\t\t\t *\t}\n\t\t\t * ```\n\t\t\t */\n\t\t\tonStart: React.PropTypes.func,\n\t\n\t\t\t/**\n\t\t\t * Called while dragging.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\tfunction (event, ui) {}\n\t\t\t * ```\n\t\t\t *\n\t\t\t * `event` is the Event that was triggered.\n\t\t\t * `ui` is an object:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\t{\n\t\t\t *\t\tposition: {top: 0, left: 0}\n\t\t\t *\t}\n\t\t\t * ```\n\t\t\t */\n\t\t\tonDrag: React.PropTypes.func,\n\t\n\t\t\t/**\n\t\t\t * Called when dragging stops.\n\t\t\t *\n\t\t\t * Example:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\tfunction (event, ui) {}\n\t\t\t * ```\n\t\t\t *\n\t\t\t * `event` is the Event that was triggered.\n\t\t\t * `ui` is an object:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t *\t{\n\t\t\t *\t\tposition: {top: 0, left: 0}\n\t\t\t *\t}\n\t\t\t * ```\n\t\t\t */\n\t\t\tonStop: React.PropTypes.func,\n\t\n\t\t\t/**\n\t\t\t * A workaround option which can be passed if onMouseDown needs to be accessed, \n\t\t\t * since it'll always be blocked (due to that there's internal use of onMouseDown)\n\t\t\t *\n\t\t\t */\n\t\t\tonMouseDown: React.PropTypes.func\n\t\t},\n\t\n\t\tcomponentWillUnmount: function() {\n\t\t\t// Remove any leftover event handlers\n\t\t\tremoveEvent(window, dragEventFor['move'], this.handleDrag);\n\t\t\tremoveEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t\t},\n\t\n\t\tcomponentWillReceiveProps: function(nextProps) {\n\t\t\t// If this is set to watch a changing start position, \n\t\t\t// set x and y to the new position.\n\t\t\tif (nextProps.moveOnStartChange) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tclientX: nextProps.start.x,\n\t\t\t\t\tclientY: nextProps.start.y\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\n\t\tgetDefaultProps: function () {\n\t\t\treturn {\n\t\t\t\taxis: 'both',\n\t\t\t\thandle: null,\n\t\t\t\tcancel: null,\n\t\t\t\tgrid: null,\n\t\t\t\tstart: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0\n\t\t\t\t},\n\t\t\t\tmoveOnStartChange: false,\n\t\t\t\tuseCSSTransforms: false,\n\t\t\t\tzIndex: NaN,\n\t\t\t\tonStart: emptyFunction,\n\t\t\t\tonDrag: emptyFunction,\n\t\t\t\tonStop: emptyFunction,\n\t\t\t\tonMouseDown: emptyFunction\n\t\t\t};\n\t\t},\n\t\n\t\tgetInitialState: function () {\n\t\t\treturn {\n\t\t\t\t// Whether or not currently dragging\n\t\t\t\tdragging: false,\n\t\n\t\t\t\t// Start top/left of this.getDOMNode()\n\t\t\t\tstartX: 0, startY: 0,\n\t\n\t\t\t\t// Offset between start top/left and mouse top/left\n\t\t\t\toffsetX: 0, offsetY: 0,\n\t\n\t\t\t\t// Current top/left of this.getDOMNode()\n\t\t\t\tclientX: this.props.start.x, clientY: this.props.start.y\n\t\t\t};\n\t\t},\n\t\n\t\thandleDragStart: function (e) {\n\t    // todo: write right implementation to prevent multitouch drag\n\t    // prevent multi-touch events\n\t    // if (isMultiTouch(e)) {\n\t    //     this.handleDragEnd.apply(e, arguments);\n\t    //     return\n\t    // }\n\t\n\t\t\t// Make it possible to attach event handlers on top of this one\n\t\t\tthis.props.onMouseDown(e);\n\t\n\t\t\t// Only catch left clicks, if clicking\n\t\t\tif (typeof e.button === \"number\" && e.button !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar node = this.getDOMNode();\n\t\n\t\t\t// Short circuit if handle or cancel prop was provided and selector doesn't match\n\t\t\tif ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n\t\t\t\t(this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t    var dragPoint = getControlPosition(e);\n\t\n\t\t\t// Initiate dragging\n\t\t\tthis.setState({\n\t\t\t\tdragging: true,\n\t\t\t\toffsetX: parseInt(dragPoint.clientX, 10),\n\t\t\t\toffsetY: parseInt(dragPoint.clientY, 10),\n\t\t\t\tstartX: parseInt(this.state.clientX, 10) || 0,\n\t\t\t\tstartY: parseInt(this.state.clientY, 10) || 0\n\t\t\t});\n\t\n\t\t\t// Add a class to the body to disable user-select. This prevents text from \n\t\t\t// being selected all over the page.\n\t\t\tdocument.body.className += \" react-draggable-active\";\n\t\n\t\t\t// Call event handler\n\t\t\tconsole.log(createUIEvent(this));\n\t\t\tthis.props.onStart(e, createUIEvent(this));\n\t\n\t\t\t// Add event handlers\n\t\t\taddEvent(window, dragEventFor['move'], this.handleDrag);\n\t\t\taddEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t\t},\n\t\n\t\thandleDragEnd: function (e) {\n\t\t\t// Short circuit if not currently dragging\n\t\t\tif (!this.state.dragging) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Turn off dragging\n\t\t\tthis.setState({\n\t\t\t\tdragging: false\n\t\t\t});\n\t\n\t\t\t// Remove the body class used to disable user-select.\n\t\t\tdocument.body.className = document.body.className.replace(\" react-draggable-active\", \"\");\n\t\n\t\t\t// Call event handler\n\t\t\tthis.props.onStop(e, createUIEvent(this));\n\t\n\t\t\t// Remove event handlers\n\t    removeEvent(window, dragEventFor['move'], this.handleDrag);\n\t    removeEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t\t},\n\t\n\t\thandleDrag: function (e) {\n\t    var dragPoint = getControlPosition(e);\n\t\n\t\t\t// Calculate top and left\n\t    var clientX = (this.state.startX + (dragPoint.clientX - this.state.offsetX));\n\t    var clientY = (this.state.startY + (dragPoint.clientY - this.state.offsetY));\n\t\n\t\t\t// Snap to grid if prop has been provided\n\t\t\tif (Array.isArray(this.props.grid)) {\n\t\t\t\tvar directionX = clientX < parseInt(this.state.clientX, 10) ? -1 : 1;\n\t\t\t\tvar directionY = clientY < parseInt(this.state.clientY, 10) ? -1 : 1;\n\t\n\t\t\t\tclientX = Math.abs(clientX - parseInt(this.state.clientX, 10)) >= this.props.grid[0]\n\t\t\t\t\t\t? (parseInt(this.state.clientX, 10) + (this.props.grid[0] * directionX))\n\t\t\t\t\t\t: parseInt(this.state.clientX, 10);\n\t\n\t\t\t\tclientY = Math.abs(clientY - parseInt(this.state.clientY, 10)) >= this.props.grid[1]\n\t\t\t\t\t\t? (parseInt(this.state.clientY, 10) + (this.props.grid[1] * directionY))\n\t\t\t\t\t\t: parseInt(this.state.clientY, 10);\n\t\t\t}\n\t\n\t\t\t// Min/max constraints\n\t\t\tif (Array.isArray(this.props.minConstraints)) {\n\t\t\t\tclientX = Math.max(this.props.minConstraints[0], clientX);\n\t\t\t\tclientY = Math.max(this.props.minConstraints[1], clientY);\n\t\t\t}\n\t\t\tif (Array.isArray(this.props.maxConstraints)) {\n\t\t\t\tclientX = Math.min(this.props.maxConstraints[0], clientX);\n\t\t\t\tclientY = Math.min(this.props.maxConstraints[1], clientY);\n\t\t\t}\n\t\n\t\t\t// Update top and left\n\t\t\tthis.setState({\n\t\t\t\tclientX: clientX,\n\t\t\t\tclientY: clientY\n\t\t\t});\n\t\n\t\t\t// Call event handler\n\t\t\tthis.props.onDrag(e, createUIEvent(this));\n\t\t},\n\t\n\t\trender: function () {\n\t\t\tvar style = {\n\t\t\t\t// Set top if vertical drag is enabled\n\t\t\t\ttop: canDragY(this)\n\t\t\t\t\t? this.state.clientY\n\t\t\t\t\t: this.state.startY,\n\t\n\t\t\t\t// Set left if horizontal drag is enabled\n\t\t\t\tleft: canDragX(this)\n\t\t\t\t\t? this.state.clientX\n\t\t\t\t\t: this.state.startX\n\t\t\t};\n\t\n\t\t\tif (this.props.useCSSTransforms) {\n\t\t\t\tstyle = positionToCSSTransform(style);\n\t\t\t}\n\t\n\t\t\t// Set zIndex if currently dragging and prop has been provided\n\t\t\tif (this.state.dragging && !isNaN(this.props.zIndex)) {\n\t\t\t\tstyle.zIndex = this.props.zIndex;\n\t\t\t}\n\t\n\t\t\t// Reuse the child provided\n\t\t\t// This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t\t\treturn cloneWithProps(React.Children.only(this.props.children), {\n\t\t\t\tstyle: style,\n\t\t\t\tclassName: 'react-draggable' + (this.state.dragging ? ' react-draggable-dragging' : ''),\n\t\n\t\t\t\tonMouseDown: this.handleDragStart,\n\t\t\t\tonTouchStart: function(ev){\n\t        ev.preventDefault(); // prevent for scroll\n\t        return this.handleDragStart.apply(this, arguments);\n\t      }.bind(this),\n\t\n\t\t\t\tonMouseUp: this.handleDragEnd,\n\t\t\t\tonTouchEnd: this.handleDragEnd\n\t\t\t});\n\t\t}\n\t});\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule ReactContext\n\t */\n\t\n\t\"use strict\";\n\t\n\tvar assign = __webpack_require__(12);\n\t\n\t/**\n\t * Keeps track of the current context.\n\t *\n\t * The context is automatically passed down the component ownership hierarchy\n\t * and is accessible via `this.context` on ReactCompositeComponents.\n\t */\n\tvar ReactContext = {\n\t\n\t  /**\n\t   * @internal\n\t   * @type {object}\n\t   */\n\t  current: {},\n\t\n\t  /**\n\t   * Temporarily extends the current context while executing scopedCallback.\n\t   *\n\t   * A typical use case might look like\n\t   *\n\t   *  render: function() {\n\t   *    var children = ReactContext.withContext({foo: 'foo'}, () => (\n\t   *\n\t   *    ));\n\t   *    return <div>{children}</div>;\n\t   *  }\n\t   *\n\t   * @param {object} newContext New context to merge into the existing context\n\t   * @param {function} scopedCallback Callback to run with the new context\n\t   * @return {ReactComponent|array<ReactComponent>}\n\t   */\n\t  withContext: function(newContext, scopedCallback) {\n\t    var result;\n\t    var previousContext = ReactContext.current;\n\t    ReactContext.current = assign({}, previousContext, newContext);\n\t    try {\n\t      result = scopedCallback();\n\t    } finally {\n\t      ReactContext.current = previousContext;\n\t    }\n\t    return result;\n\t  }\n\t\n\t};\n\t\n\tmodule.exports = ReactContext;\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule ReactCurrentOwner\n\t */\n\t\n\t\"use strict\";\n\t\n\t/**\n\t * Keeps track of the current owner.\n\t *\n\t * The current owner is the component who should own any components that are\n\t * currently being constructed.\n\t *\n\t * The depth indicate how many composite components are above this render level.\n\t */\n\tvar ReactCurrentOwner = {\n\t\n\t  /**\n\t   * @internal\n\t   * @type {ReactComponent}\n\t   */\n\t  current: null\n\t\n\t};\n\t\n\tmodule.exports = ReactCurrentOwner;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule ReactElement\n\t */\n\t\n\t\"use strict\";\n\t\n\tvar ReactContext = __webpack_require__(25);\n\tvar ReactCurrentOwner = __webpack_require__(26);\n\t\n\tvar warning = __webpack_require__(7);\n\t\n\tvar RESERVED_PROPS = {\n\t  key: true,\n\t  ref: true\n\t};\n\t\n\t/**\n\t * Warn for mutations.\n\t *\n\t * @internal\n\t * @param {object} object\n\t * @param {string} key\n\t */\n\tfunction defineWarningProperty(object, key) {\n\t  Object.defineProperty(object, key, {\n\t\n\t    configurable: false,\n\t    enumerable: true,\n\t\n\t    get: function() {\n\t      if (!this._store) {\n\t        return null;\n\t      }\n\t      return this._store[key];\n\t    },\n\t\n\t    set: function(value) {\n\t      (false ? warning(\n\t        false,\n\t        'Don\\'t set the ' + key + ' property of the component. ' +\n\t        'Mutate the existing props object instead.'\n\t      ) : null);\n\t      this._store[key] = value;\n\t    }\n\t\n\t  });\n\t}\n\t\n\t/**\n\t * This is updated to true if the membrane is successfully created.\n\t */\n\tvar useMutationMembrane = false;\n\t\n\t/**\n\t * Warn for mutations.\n\t *\n\t * @internal\n\t * @param {object} element\n\t */\n\tfunction defineMutationMembrane(prototype) {\n\t  try {\n\t    var pseudoFrozenProperties = {\n\t      props: true\n\t    };\n\t    for (var key in pseudoFrozenProperties) {\n\t      defineWarningProperty(prototype, key);\n\t    }\n\t    useMutationMembrane = true;\n\t  } catch (x) {\n\t    // IE will fail on defineProperty\n\t  }\n\t}\n\t\n\t/**\n\t * Base constructor for all React elements. This is only used to make this\n\t * work with a dynamic instanceof check. Nothing should live on this prototype.\n\t *\n\t * @param {*} type\n\t * @param {string|object} ref\n\t * @param {*} key\n\t * @param {*} props\n\t * @internal\n\t */\n\tvar ReactElement = function(type, key, ref, owner, context, props) {\n\t  // Built-in properties that belong on the element\n\t  this.type = type;\n\t  this.key = key;\n\t  this.ref = ref;\n\t\n\t  // Record the component responsible for creating this element.\n\t  this._owner = owner;\n\t\n\t  // TODO: Deprecate withContext, and then the context becomes accessible\n\t  // through the owner.\n\t  this._context = context;\n\t\n\t  if (false) {\n\t    // The validation flag and props are currently mutative. We put them on\n\t    // an external backing store so that we can freeze the whole object.\n\t    // This can be replaced with a WeakMap once they are implemented in\n\t    // commonly used development environments.\n\t    this._store = { validated: false, props: props };\n\t\n\t    // We're not allowed to set props directly on the object so we early\n\t    // return and rely on the prototype membrane to forward to the backing\n\t    // store.\n\t    if (useMutationMembrane) {\n\t      Object.freeze(this);\n\t      return;\n\t    }\n\t  }\n\t\n\t  this.props = props;\n\t};\n\t\n\t// We intentionally don't expose the function on the constructor property.\n\t// ReactElement should be indistinguishable from a plain object.\n\tReactElement.prototype = {\n\t  _isReactElement: true\n\t};\n\t\n\tif (false) {\n\t  defineMutationMembrane(ReactElement.prototype);\n\t}\n\t\n\tReactElement.createElement = function(type, config, children) {\n\t  var propName;\n\t\n\t  // Reserved names are extracted\n\t  var props = {};\n\t\n\t  var key = null;\n\t  var ref = null;\n\t\n\t  if (config != null) {\n\t    ref = config.ref === undefined ? null : config.ref;\n\t    if (false) {\n\t      (\"production\" !== process.env.NODE_ENV ? warning(\n\t        config.key !== null,\n\t        'createElement(...): Encountered component with a `key` of null. In ' +\n\t        'a future version, this will be treated as equivalent to the string ' +\n\t        '\\'null\\'; instead, provide an explicit key or use undefined.'\n\t      ) : null);\n\t    }\n\t    // TODO: Change this back to `config.key === undefined`\n\t    key = config.key == null ? null : '' + config.key;\n\t    // Remaining properties are added to a new props object\n\t    for (propName in config) {\n\t      if (config.hasOwnProperty(propName) &&\n\t          !RESERVED_PROPS.hasOwnProperty(propName)) {\n\t        props[propName] = config[propName];\n\t      }\n\t    }\n\t  }\n\t\n\t  // Children can be more than one argument, and those are transferred onto\n\t  // the newly allocated props object.\n\t  var childrenLength = arguments.length - 2;\n\t  if (childrenLength === 1) {\n\t    props.children = children;\n\t  } else if (childrenLength > 1) {\n\t    var childArray = Array(childrenLength);\n\t    for (var i = 0; i < childrenLength; i++) {\n\t      childArray[i] = arguments[i + 2];\n\t    }\n\t    props.children = childArray;\n\t  }\n\t\n\t  // Resolve default props\n\t  if (type && type.defaultProps) {\n\t    var defaultProps = type.defaultProps;\n\t    for (propName in defaultProps) {\n\t      if (typeof props[propName] === 'undefined') {\n\t        props[propName] = defaultProps[propName];\n\t      }\n\t    }\n\t  }\n\t\n\t  return new ReactElement(\n\t    type,\n\t    key,\n\t    ref,\n\t    ReactCurrentOwner.current,\n\t    ReactContext.current,\n\t    props\n\t  );\n\t};\n\t\n\tReactElement.createFactory = function(type) {\n\t  var factory = ReactElement.createElement.bind(null, type);\n\t  // Expose the type on the factory and the prototype so that it can be\n\t  // easily accessed on elements. E.g. <Foo />.type === Foo.type.\n\t  // This should not be named `constructor` since this may not be the function\n\t  // that created the element, and it may not even be a constructor.\n\t  factory.type = type;\n\t  return factory;\n\t};\n\t\n\tReactElement.cloneAndReplaceProps = function(oldElement, newProps) {\n\t  var newElement = new ReactElement(\n\t    oldElement.type,\n\t    oldElement.key,\n\t    oldElement.ref,\n\t    oldElement._owner,\n\t    oldElement._context,\n\t    newProps\n\t  );\n\t\n\t  if (false) {\n\t    // If the key on the original is valid, then the clone is valid\n\t    newElement._store.validated = oldElement._store.validated;\n\t  }\n\t  return newElement;\n\t};\n\t\n\t/**\n\t * @param {?object} object\n\t * @return {boolean} True if `object` is a valid component.\n\t * @final\n\t */\n\tReactElement.isValidElement = function(object) {\n\t  // ReactTestUtils is often used outside of beforeEach where as React is\n\t  // within it. This leads to two different instances of React on the same\n\t  // page. To identify a element from a different React instance we use\n\t  // a flag instead of an instanceof check.\n\t  var isElement = !!(object && object._isReactElement);\n\t  // if (isElement && !(object instanceof ReactElement)) {\n\t  // This is an indicator that you're using multiple versions of React at the\n\t  // same time. This will screw with ownership and stuff. Fix it, please.\n\t  // TODO: We could possibly warn here.\n\t  // }\n\t  return isElement;\n\t};\n\t\n\tmodule.exports = ReactElement;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule ReactPropTransferer\n\t */\n\t\n\t\"use strict\";\n\t\n\tvar assign = __webpack_require__(12);\n\tvar emptyFunction = __webpack_require__(5);\n\tvar invariant = __webpack_require__(29);\n\tvar joinClasses = __webpack_require__(30);\n\tvar warning = __webpack_require__(7);\n\t\n\tvar didWarn = false;\n\t\n\t/**\n\t * Creates a transfer strategy that will merge prop values using the supplied\n\t * `mergeStrategy`. If a prop was previously unset, this just sets it.\n\t *\n\t * @param {function} mergeStrategy\n\t * @return {function}\n\t */\n\tfunction createTransferStrategy(mergeStrategy) {\n\t  return function(props, key, value) {\n\t    if (!props.hasOwnProperty(key)) {\n\t      props[key] = value;\n\t    } else {\n\t      props[key] = mergeStrategy(props[key], value);\n\t    }\n\t  };\n\t}\n\t\n\tvar transferStrategyMerge = createTransferStrategy(function(a, b) {\n\t  // `merge` overrides the first object's (`props[key]` above) keys using the\n\t  // second object's (`value`) keys. An object's style's existing `propA` would\n\t  // get overridden. Flip the order here.\n\t  return assign({}, b, a);\n\t});\n\t\n\t/**\n\t * Transfer strategies dictate how props are transferred by `transferPropsTo`.\n\t * NOTE: if you add any more exceptions to this list you should be sure to\n\t * update `cloneWithProps()` accordingly.\n\t */\n\tvar TransferStrategies = {\n\t  /**\n\t   * Never transfer `children`.\n\t   */\n\t  children: emptyFunction,\n\t  /**\n\t   * Transfer the `className` prop by merging them.\n\t   */\n\t  className: createTransferStrategy(joinClasses),\n\t  /**\n\t   * Transfer the `style` prop (which is an object) by merging them.\n\t   */\n\t  style: transferStrategyMerge\n\t};\n\t\n\t/**\n\t * Mutates the first argument by transferring the properties from the second\n\t * argument.\n\t *\n\t * @param {object} props\n\t * @param {object} newProps\n\t * @return {object}\n\t */\n\tfunction transferInto(props, newProps) {\n\t  for (var thisKey in newProps) {\n\t    if (!newProps.hasOwnProperty(thisKey)) {\n\t      continue;\n\t    }\n\t\n\t    var transferStrategy = TransferStrategies[thisKey];\n\t\n\t    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {\n\t      transferStrategy(props, thisKey, newProps[thisKey]);\n\t    } else if (!props.hasOwnProperty(thisKey)) {\n\t      props[thisKey] = newProps[thisKey];\n\t    }\n\t  }\n\t  return props;\n\t}\n\t\n\t/**\n\t * ReactPropTransferer are capable of transferring props to another component\n\t * using a `transferPropsTo` method.\n\t *\n\t * @class ReactPropTransferer\n\t */\n\tvar ReactPropTransferer = {\n\t\n\t  TransferStrategies: TransferStrategies,\n\t\n\t  /**\n\t   * Merge two props objects using TransferStrategies.\n\t   *\n\t   * @param {object} oldProps original props (they take precedence)\n\t   * @param {object} newProps new props to merge in\n\t   * @return {object} a new object containing both sets of props merged.\n\t   */\n\t  mergeProps: function(oldProps, newProps) {\n\t    return transferInto(assign({}, oldProps), newProps);\n\t  },\n\t\n\t  /**\n\t   * @lends {ReactPropTransferer.prototype}\n\t   */\n\t  Mixin: {\n\t\n\t    /**\n\t     * Transfer props from this component to a target component.\n\t     *\n\t     * Props that do not have an explicit transfer strategy will be transferred\n\t     * only if the target component does not already have the prop set.\n\t     *\n\t     * This is usually used to pass down props to a returned root component.\n\t     *\n\t     * @param {ReactElement} element Component receiving the properties.\n\t     * @return {ReactElement} The supplied `component`.\n\t     * @final\n\t     * @protected\n\t     */\n\t    transferPropsTo: function(element) {\n\t      (false ? invariant(\n\t        element._owner === this,\n\t        '%s: You can\\'t call transferPropsTo() on a component that you ' +\n\t        'don\\'t own, %s. This usually means you are calling ' +\n\t        'transferPropsTo() on a component passed in as props or children.',\n\t        this.constructor.displayName,\n\t        typeof element.type === 'string' ?\n\t        element.type :\n\t        element.type.displayName\n\t      ) : invariant(element._owner === this));\n\t\n\t      if (false) {\n\t        if (!didWarn) {\n\t          didWarn = true;\n\t          (\"production\" !== process.env.NODE_ENV ? warning(\n\t            false,\n\t            'transferPropsTo is deprecated. ' +\n\t            'See http://fb.me/react-transferpropsto for more information.'\n\t          ) : null);\n\t        }\n\t      }\n\t\n\t      // Because elements are immutable we have to merge into the existing\n\t      // props object rather than clone it.\n\t      transferInto(element.props, this.props);\n\t\n\t      return element;\n\t    }\n\t\n\t  }\n\t};\n\t\n\tmodule.exports = ReactPropTransferer;\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule invariant\n\t */\n\t\n\t\"use strict\";\n\t\n\t/**\n\t * Use invariant() to assert state which your program assumes to be true.\n\t *\n\t * Provide sprintf-style format (only %s is supported) and arguments\n\t * to provide information about what broke and what you were\n\t * expecting.\n\t *\n\t * The invariant message will be stripped in production, but the invariant\n\t * will remain to ensure logic does not differ in production.\n\t */\n\t\n\tvar invariant = function(condition, format, a, b, c, d, e, f) {\n\t  if (false) {\n\t    if (format === undefined) {\n\t      throw new Error('invariant requires an error message argument');\n\t    }\n\t  }\n\t\n\t  if (!condition) {\n\t    var error;\n\t    if (format === undefined) {\n\t      error = new Error(\n\t        'Minified exception occurred; use the non-minified dev environment ' +\n\t        'for the full error message and additional helpful warnings.'\n\t      );\n\t    } else {\n\t      var args = [a, b, c, d, e, f];\n\t      var argIndex = 0;\n\t      error = new Error(\n\t        'Invariant Violation: ' +\n\t        format.replace(/%s/g, function() { return args[argIndex++]; })\n\t      );\n\t    }\n\t\n\t    error.framesToPop = 1; // we don't care about invariant's own frame\n\t    throw error;\n\t  }\n\t};\n\t\n\tmodule.exports = invariant;\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule joinClasses\n\t * @typechecks static-only\n\t */\n\t\n\t\"use strict\";\n\t\n\t/**\n\t * Combines multiple className strings into one.\n\t * http://jsperf.com/joinclasses-args-vs-array\n\t *\n\t * @param {...?string} classes\n\t * @return {string}\n\t */\n\tfunction joinClasses(className/*, ... */) {\n\t  if (!className) {\n\t    className = '';\n\t  }\n\t  var nextClass;\n\t  var argLength = arguments.length;\n\t  if (argLength > 1) {\n\t    for (var ii = 1; ii < argLength; ii++) {\n\t      nextClass = arguments[ii];\n\t      if (nextClass) {\n\t        className = (className ? className + ' ' : '') + nextClass;\n\t      }\n\t    }\n\t  }\n\t  return className;\n\t}\n\t\n\tmodule.exports = joinClasses;\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule keyOf\n\t */\n\t\n\t/**\n\t * Allows extraction of a minified key. Let's the build system minify keys\n\t * without loosing the ability to dynamically use key strings as values\n\t * themselves. Pass in an object with a single key/val pair and it will return\n\t * you the string key of that single record. Suppose you want to grab the\n\t * value for a key 'className' inside of an object. Key/val minification may\n\t * have aliased that key to be 'xa12'. keyOf({className: null}) will return\n\t * 'xa12' in that case. Resolve keys you want to use once at startup time, then\n\t * reuse those resolutions.\n\t */\n\tvar keyOf = function(oneKeyObj) {\n\t  var key;\n\t  for (key in oneKeyObj) {\n\t    if (!oneKeyObj.hasOwnProperty(key)) {\n\t      continue;\n\t    }\n\t    return key;\n\t  }\n\t  return null;\n\t};\n\t\n\t\n\tmodule.exports = keyOf;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2014, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule shallowEqual\n\t */\n\t\n\t\"use strict\";\n\t\n\t/**\n\t * Performs equality by iterating through keys on an object and returning\n\t * false when any key has values which are not strictly equal between\n\t * objA and objB. Returns true when the values of all keys are strictly equal.\n\t *\n\t * @return {boolean}\n\t */\n\tfunction shallowEqual(objA, objB) {\n\t  if (objA === objB) {\n\t    return true;\n\t  }\n\t  var key;\n\t  // Test for A's keys different from B.\n\t  for (key in objA) {\n\t    if (objA.hasOwnProperty(key) &&\n\t        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n\t      return false;\n\t    }\n\t  }\n\t  // Test for B's keys missing from A.\n\t  for (key in objB) {\n\t    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t}\n\t\n\tmodule.exports = shallowEqual;\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {\n\n\tmodule.exports = __webpack_require__(__webpack_module_template_argument_0__);\n\n\n/***/ }\n/******/ ])))\n});\n\n\n\n/** WEBPACK FOOTER **\n ** react-grid-layout.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f0fd1d129c5e531dc173\n **/","module.exports = require('./lib/ReactGridLayout');\nmodule.exports.Responsive = require('./lib/ResponsiveReactGridLayout');\n\n\n\n/** WEBPACK FOOTER **\n ** ./index-dev.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"React\"\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar assign = require('object-assign');\n\nvar utils = module.exports = {\n\n  /**\n   * Return the bottom coordinate of the layout.\n   *\n   * @param  {Array} layout Layout array.\n   * @return {Number}       Bottom coordinate.\n   */\n  bottom(layout) {\n    var max = 0, bottomY;\n    for (var i = 0, len = layout.length; i < len; i++) {\n      bottomY = layout[i].y + layout[i].h;\n      if (bottomY > max) max = bottomY;\n    }\n    return max;\n  },\n\n  /**\n   * Clones a shallow object.\n   * @param  {Object} obj Object to clone.\n   * @return {Object}   Cloned object.\n   */\n  clone(obj) {\n    return assign({}, obj);\n  },\n\n  /**\n   * Given two layouts, check if they collide.\n   *\n   * @param  {Object} l1 Layout object.\n   * @param  {Object} l2 Layout object.\n   * @return {Boolean}   True if colliding.\n   */\n  collides(l1, l2) {\n    if (l1 === l2) return false; // same element\n    if (l1.x + l1.w <= l2.x) return false; // l1 is left of l2\n    if (l1.x >= l2.x + l2.w) return false; // l1 is right of l2\n    if (l1.y + l1.h <= l2.y) return false; // l1 is above l2\n    if (l1.y >= l2.y + l2.h) return false; // l1 is below l2\n    return true; // boxes overlap\n  },\n\n  /**\n   * Given a layout, compact it. This involves going down each y coordinate and removing gaps\n   * between items.\n   *\n   * @param  {Array} layout Layout.\n   * @return {Array}       Compacted Layout.\n   */\n  compact(layout) {\n    // Statics go in the compareWith array right away so items flow around them.\n    var compareWith = utils.getStatics(layout), out = [];\n    // We go through the items by row and column.\n    var sorted = utils.sortLayoutItemsByRowCol(layout);\n\n    for (var i = 0, len = sorted.length; i < len; i++) {\n      var l = sorted[i];\n\n      // Don't move static elements\n      if (!l.static) {\n        l = utils.compactItem(compareWith, l);\n\n        // Add to comparison array. We only collide with items before this one.\n        // Statics are already in this array.\n        compareWith.push(l);\n      }\n\n      // Add to output array to make sure they still come out in the right order.\n      out[layout.indexOf(l)] = l;\n\n      // Clear moved flag, if it exists.\n      delete l.moved;\n    }\n\n    return out;\n  },\n\n  compactItem(compareWith, l) {\n    // Move the element up as far as it can go without colliding.\n    while (l.y > 0 && !utils.getFirstCollision(compareWith, l)) {\n      l.y--;\n    }\n\n    // Move it down, and keep moving it down if it's colliding.\n    var collides;\n    while((collides = utils.getFirstCollision(compareWith, l))) {\n      l.y = collides.y + collides.h;\n    }\n    return l;\n  },\n\n  /**\n   * Given a layout, make sure all elements fit within its bounds.\n   *\n   * @param  {Array} layout Layout array.\n   * @param  {Number} bounds Number of columns.\n   * @return {[type]}        [description]\n   */\n  correctBounds(layout, bounds) {\n    var collidesWith = utils.getStatics(layout);\n    for (var i = 0, len = layout.length; i < len; i++) {\n      var l = layout[i];\n      // Overflows right\n      if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;\n      // Overflows left\n      if (l.x < 0) {\n        l.x = 0;\n        l.w = bounds.cols;\n      }\n      if (!l.static) collidesWith.push(l);\n      else {\n        // If this is static and collides with other statics, we must move it down.\n        // We have to do something nicer than just letting them overlap.\n        while(utils.getFirstCollision(collidesWith, l)) {\n          l.y++;\n        }\n      }\n\n    }\n    return layout;\n  },\n\n  /**\n   * Get a layout item by ID. Used so we can override later on if necessary.\n   *\n   * @param  {Array}  layout Layout array.\n   * @param  {Number} id     ID\n   * @return {LayoutItem}    Item at ID.\n   */\n  getLayoutItem(layout, id) {\n    id = \"\" + id;\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (\"\" + layout[i].i === id) return layout[i];\n    }\n  },\n\n  /**\n   * Returns the first item this layout collides with.\n   * It doesn't appear to matter which order we approach this from, although\n   * perhaps that is the wrong thing to do.\n   *\n   * @param  {Object} layoutItem Layout item.\n   * @return {Object|undefined}  A colliding layout item, or undefined.\n   */\n  getFirstCollision(layout, layoutItem) {\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (utils.collides(layout[i], layoutItem)) return layout[i];\n    }\n  },\n\n  getAllCollisions(layout, layoutItem) {\n    var out = [];\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (utils.collides(layout[i], layoutItem)) out.push(layout[i]);\n    }\n    return out;\n  },\n\n  /**\n   * Get all static elements.\n   * @param  {Array} layout Array of layout objects.\n   * @return {Array}        Array of static layout items..\n   */\n  getStatics(layout) {\n    var out = [];\n    for (var i = 0, len = layout.length; i < len; i++) {\n      if (layout[i].static) out.push(layout[i]);\n    }\n    return out;\n  },\n\n  /**\n   * Move an element. Responsible for doing cascading movements of other elements.\n   *\n   * @param  {Array}      layout Full layout to modify.\n   * @param  {LayoutItem} l      element to move.\n   * @param  {Number}     [x]    X position in grid units.\n   * @param  {Number}     [y]    Y position in grid units.\n   * @param  {Boolean}    [isUserAction] If true, designates that the item we're moving is\n   *                                     being dragged/resized by th euser.\n   */\n  moveElement(layout, l, x, y, isUserAction) {\n    if (l.static) return layout;\n\n    // Short-circuit if nothing to do.\n    if (l.y === y && l.x === x) return layout;\n\n    var movingUp = l.y > y;\n    // This is quite a bit faster than extending the object\n    if (x !== undefined) l.x = x;\n    if (y !== undefined) l.y = y;\n    l.moved = true;\n\n    // If this collides with anything, move it.\n    // When doing this comparison, we have to sort the items we compare with\n    // to ensure, in the case of multiple collisions, that we're getting the\n    // nearest collision.\n    var sorted = utils.sortLayoutItemsByRowCol(layout);\n    if (movingUp) sorted = sorted.reverse();\n    var collisions = utils.getAllCollisions(sorted, l);\n\n    // Move each item that collides away from this element.\n    for (var i = 0, len = collisions.length; i < len; i++) {\n      var collision = collisions[i];\n      // console.log('resolving collision between', l.i, 'at', l.y, 'and', collision.i, 'at', collision.y);\n\n      // Short circuit so we can't infinite loop\n      if (collision.moved) continue;\n\n      // This makes it feel a bit more precise by waiting to swap for just a bit when moving up.\n      if (l.y > collision.y && l.y - collision.y > collision.h / 4) continue;\n\n      // Don't move static items - we have to move *this* element away\n      if (collision.static) {\n        layout = utils.moveElementAwayFromCollision(layout, collision, l, isUserAction);\n      } else {\n        layout = utils.moveElementAwayFromCollision(layout, l, collision, isUserAction);\n      }\n    }\n\n    return layout;\n  },\n\n  /**\n   * This is where the magic needs to happen - given a collision, move an element away from the collision.\n   * We attempt to move it up if there's room, otherwise it goes below.\n   *\n   * @param  {Array} layout            Full layout to modify.\n   * @param  {LayoutItem} collidesWith Layout item we're colliding with.\n   * @param  {LayoutItem} itemToMove   Layout item we're moving.\n   * @param  {Boolean} [isUserAction]  If true, designates that the item we're moving is being dragged/resized\n   *                                   by the user.\n   */\n  moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction) {\n\n    // If there is enough space above the collision to put this element, move it there.\n    // We only do this on the main collision as this can get funky in cascades and cause\n    // unwanted swapping behavior.\n    if (isUserAction) {\n      // Make a mock item so we don't modify the item here, only modify in moveElement.\n      var fakeItem = {\n        x: itemToMove.x,\n        y: itemToMove.y,\n        w: itemToMove.w,\n        h: itemToMove.h,\n      };\n      fakeItem.y = Math.max(collidesWith.y - itemToMove.h, 0);\n      if (!utils.getFirstCollision(layout, fakeItem)) {\n        return utils.moveElement(layout, itemToMove, undefined, fakeItem.y);\n      }\n    }\n\n    // Previously this was optimized to move below the collision directly, but this can cause problems\n    // with cascading moves, as an item may actually leapflog a collision and cause a reversal in order.\n    return utils.moveElement(layout, itemToMove, undefined, itemToMove.y + 1);\n  },\n\n  /**\n   * Helper to convert a number to a percentage string.\n   *\n   * @param  {Number} num Any number\n   * @return {String}     That number as a percentage.\n   */\n  perc(num) {\n    return num * 100 + '%';\n  },\n\n  setTransform(style, coords) {\n    // Replace unitless items with px\n    var x = ('' + coords[0]).replace(/(\\d)$/, '$1px');\n    var y = ('' + coords[1]).replace(/(\\d)$/, '$1px');\n    style.transform = \"translate(\" + x + \",\" + y + \")\";\n    style.WebkitTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.MozTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.msTransform = \"translate(\" + x + \",\" + y + \")\";\n    style.OTransform = \"translate(\" + x + \",\" + y + \")\";\n    return style;\n  },\n\n  /**\n   * Get layout items sorted from top left to right and down.\n   *\n   * @return {Array} Array of layout objects.\n   * @return {Array}        Layout, sorted static items first.\n   */\n  sortLayoutItemsByRowCol(layout) {\n    return [].concat(layout).sort(function(a, b) {\n      if (a.y > b.y || (a.y === b.y && a.x > b.x)) {\n        return 1;\n      }\n      return -1;\n    });\n  },\n\n  /**\n   * Generate a layout using the initialLayout an children as a template.\n   * Missing entries will be added, extraneous ones will be truncated.\n   *\n   * @param  {Array}  initialLayout Layout passed in through props.\n   * @param  {String} breakpoint    Current responsive breakpoint.\n   * @return {Array}                Working layout.\n   */\n  synchronizeLayoutWithChildren(initialLayout, children, cols) {\n    children = [].concat(children); // ensure 'children' is always an array\n    initialLayout = initialLayout || [];\n\n    // Generate one layout item per child.\n    var layout = [];\n    for (var i = 0, len = children.length; i < len; i++) {\n      var child = children[i];\n      // Don't overwrite if it already exists.\n      var exists = utils.getLayoutItem(initialLayout, child.key);\n      if (exists) {\n        // Ensure 'i' is always a string\n        exists.i = '' + exists.i;\n        layout.push(exists);\n        continue;\n      }\n      // New item: attempt to use a layout item from the child, if it exists.\n      var g = child.props._grid;\n      if (g) {\n        utils.validateLayout([g], 'ReactGridLayout.child');\n        // Validated; add it to the layout. Bottom 'y' possible is the bottom of the layout.\n        // This allows you to do nice stuff like specify {y: Infinity}\n        layout.push(assign({}, g, {y: Math.min(utils.bottom(layout), g.y), i: child.key}));\n      } else {\n        // Nothing provided: ensure this is added to the bottom\n        layout.push({w: 1, h: 1, x: 0, y: utils.bottom(layout), i: child.key});\n      }\n    }\n\n    // Correct the layout.\n    layout = utils.correctBounds(layout, {cols: cols});\n    layout = utils.compact(layout);\n\n    return layout;\n  },\n\n  /**\n   * Validate a layout. Throws errors.\n   *\n   * @param  {Array}  layout        Array of layout items.\n   * @param  {String} [contextName] Context name for errors.\n   * @throw  {Error}                Validation error.\n   */\n  validateLayout(layout, contextName) {\n    contextName = contextName || \"Layout\";\n    var subProps = ['x', 'y', 'w', 'h'];\n    if (!Array.isArray(layout)) throw new Error(contextName + \" must be an array!\");\n    for (var i = 0, len = layout.length; i < len; i++) {\n      for (var j = 0; j < subProps.length; j++) {\n        if (typeof layout[i][subProps[j]] !== 'number') {\n          throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].' + subProps[j] + ' must be a Number!');\n        }\n      }\n      if (layout[i].static !== undefined && typeof layout[i].static !== 'boolean') {\n        throw new Error('ReactGridLayout: ' + contextName + '[' + i + '].static must be a Boolean!');\n      }\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/utils.js\n **/","/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule ReactComponentWithPureRenderMixin\n*/\n\n\"use strict\";\n\nvar shallowEqual = require(\"./shallowEqual\");\n\n/**\n * If your React component's render function is \"pure\", e.g. it will render the\n * same result given the same props and state, provide this Mixin for a\n * considerable performance boost.\n *\n * Most React components have pure render functions.\n *\n * Example:\n *\n *   var ReactComponentWithPureRenderMixin =\n *     require('ReactComponentWithPureRenderMixin');\n *   React.createClass({\n *     mixins: [ReactComponentWithPureRenderMixin],\n *\n *     render: function() {\n *       return <div className={this.props.className}>foo</div>;\n *     }\n *   });\n *\n * Note: This only checks shallow equality for props and state. If these contain\n * complex data structures this mixin may have false-negatives for deeper\n * differences. Only mixin to components which have simple props and state, or\n * use `forceUpdate()` when you know deep data structures have changed.\n */\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return !shallowEqual(this.props, nextProps) ||\n           !shallowEqual(this.state, nextState);\n  }\n};\n\nmodule.exports = ReactComponentWithPureRenderMixin;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/ReactComponentWithPureRenderMixin.js\n ** module id = 3\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n * @providesModule cloneWithProps\n */\n\n\"use strict\";\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");\n\nvar keyOf = require(\"./keyOf\");\nvar warning = require(\"./warning\");\n\nvar CHILDREN_PROP = keyOf({children: null});\n\n/**\n * Sometimes you want to change the props of a child passed to you. Usually\n * this is to add a CSS class.\n *\n * @param {object} child child component you'd like to clone\n * @param {object} props props you'd like to modify. They will be merged\n * as if you used `transferPropsTo()`.\n * @return {object} a clone of child with props merged in.\n */\nfunction cloneWithProps(child, props) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      !child.ref,\n      'You are calling cloneWithProps() on a child with a ref. This is ' +\n      'dangerous because you\\'re creating a new child which will not be ' +\n      'added as a ref to its parent.'\n    ) : null);\n  }\n\n  var newProps = ReactPropTransferer.mergeProps(props, child.props);\n\n  // Use `child.props.children` if it is provided.\n  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&\n      child.props.hasOwnProperty(CHILDREN_PROP)) {\n    newProps.children = child.props.children;\n  }\n\n  // The current API doesn't retain _owner and _context, which is why this\n  // doesn't use ReactElement.cloneAndReplaceProps.\n  return ReactElement.createElement(child.type, newProps);\n}\n\nmodule.exports = cloneWithProps;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/cloneWithProps.js\n ** module id = 4\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule emptyFunction\n */\n\nfunction makeEmptyFunction(arg) {\n  return function() {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nfunction emptyFunction() {}\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function() { return this; };\nemptyFunction.thatReturnsArgument = function(arg) { return arg; };\n\nmodule.exports = emptyFunction;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/emptyFunction.js\n ** module id = 5\n ** module chunks = 0\n **/","'use strict';\nvar deepEqual = require('deep-equal');\n\n// Like PureRenderMixin, but with deep comparisons.\nvar PureDeepRenderMixin = {\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return !deepEqual(this.props, nextProps) ||\n           !deepEqual(this.state, nextState);\n  }\n};\n\nmodule.exports = PureDeepRenderMixin;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/mixins/PureDeepRenderMixin.js\n **/","/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule warning\n */\n\n\"use strict\";\n\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (\"production\" !== process.env.NODE_ENV) {\n  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));\n    }\n  };\n}\n\nmodule.exports = warning;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/warning.js\n ** module id = 7\n ** module chunks = 0\n **/","'use strict';\nvar React = require('react');\nvar GridItem = require('./GridItem');\nvar utils = require('./utils');\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\nvar WidthListeningMixin = require('./mixins/WidthListeningMixin');\n\n/**\n * A reactive, fluid grid layout with draggable, resizable components.\n */\nvar ReactGridLayout = React.createClass({\n  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\n  propTypes: {\n    // \n    // Basic props\n    //\n\n    // If true, the container height swells and contracts to fit contents\n    autoSize: React.PropTypes.bool,\n    // # of cols.\n    cols: React.PropTypes.number,\n\n    // A selector that will not be draggable.\n    draggableCancel: React.PropTypes.string,\n    // A selector for the draggable handler\n    draggableHandle: React.PropTypes.string,\n\n    // layout is an array of object with the format:\n    // {x: Number, y: Number, w: Number, h: Number}\n    layout: function(props, propName, componentName) {\n      var layout = props.layout;\n      // I hope you're setting the _grid property on the grid items\n      if (layout === undefined) return; \n      utils.validateLayout(layout, 'layout');\n    },\n\n    layouts: function(props, propName, componentName) {\n      if (props.layouts) {\n        throw new Error(\"ReactGridLayout does not use `layouts`: Use ReactGridLayout.Responsive.\");\n      }\n    },\n\n    // margin between items [x, y] in px\n    margin: React.PropTypes.array,\n    // Rows have a static height, but you can change this based on breakpoints if you like\n    rowHeight: React.PropTypes.number,\n\n    //\n    // Flags\n    //\n    isDraggable: React.PropTypes.bool,\n    isResizable: React.PropTypes.bool,\n    // Use CSS transforms instead of top/left\n    useCSSTransforms: React.PropTypes.bool,\n\n    // \n    // Callbacks\n    // \n\n    // Callback so you can save the layout.\n    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n    onLayoutChange: React.PropTypes.func,\n\n    // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e).\n    // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n    onDragStart: React.PropTypes.func,\n    // Calls on each drag movement.\n    onDrag: React.PropTypes.func,\n    // Calls when drag is complete.\n    onDragStop: React.PropTypes.func,\n    //Calls when resize starts.\n    onResizeStart: React.PropTypes.func,\n    // Calls when resize movement happens.\n    onResize: React.PropTypes.func,\n    // Calls when resize is complete.\n    onResizeStop: React.PropTypes.func,\n\n    //\n    // Other validations\n    //\n\n    // Children must not have duplicate keys.\n    children: function(props, propName, componentName) {\n      React.PropTypes.node.apply(this, arguments);\n      var children = props[propName];\n\n      // Check children keys for duplicates. Throw if found.\n      var keys = {};\n      React.Children.forEach(children, function(child, i, list) {\n        if (keys[child.key]) {\n          throw new Error(\"Duplicate child key found! This will cause problems in ReactGridLayout.\");\n        }\n        keys[child.key] = true;\n      });\n    }\n  },\n\n  getDefaultProps() {\n    return {\n      autoSize: true,\n      cols: 12, \n      rowHeight: 150,\n      layout: [],\n      margin: [10, 10],\n      isDraggable: true,\n      isResizable: true,\n      useCSSTransforms: true,\n      onLayoutChange: function(){},\n      onDragStart: function() {},\n      onDrag: function() {},\n      onDragStop: function() {},\n      onResizeStart: function() {},\n      onResize: function() {},\n      onResizeStop: function() {}\n    };\n  },\n\n  getInitialState() {\n    return {\n      layout: utils.synchronizeLayoutWithChildren(this.props.layout, this.props.children, this.props.cols),\n      width: this.props.initialWidth,\n      activeDrag: null\n    };\n  },\n\n  componentDidMount() {\n    // Call back with layout on mount. This should be done after correcting the layout width\n    // to ensure we don't rerender with the wrong width.\n    this.props.onLayoutChange(this.state.layout);\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // This allows you to set the width manually if you like.\n    // Use manual width changes in combination with `listenToWindowResize: false`\n    if (nextProps.width !== this.props.width) this.onWidthChange(nextProps.width);\n\n    // If children change, regenerate the layout.\n    if (nextProps.children.length !== this.props.children.length) {\n      this.setState({\n        layout: utils.synchronizeLayoutWithChildren(this.state.layout, nextProps.children, nextProps.cols)\n      });\n    }\n\n    // Allow parent to set layout directly.\n    if (nextProps.layout && JSON.stringify(nextProps.layout) !== JSON.stringify(this.state.layout)) {\n      this.setState({\n        layout: utils.synchronizeLayoutWithChildren(nextProps.layout, nextProps.children, nextProps.cols)\n      });\n    }\n  },\n\n  componentDidUpdate(prevProps, prevState) {\n    // Call back so we can store the layout\n    // Do it only when a resize/drag is not active, otherwise there are way too many callbacks\n    if (this.state.layout !== prevState.layout && !this.state.activeDrag) {\n      this.props.onLayoutChange(this.state.layout, this.state.layouts);\n    }\n  },\n\n  /**\n   * Calculates a pixel value for the container.\n   * @return {String} Container height in pixels.\n   */\n  containerHeight() {\n    if (!this.props.autoSize) return;\n    return utils.bottom(this.state.layout) * this.props.rowHeight + this.props.margin[1] + 'px';\n  },\n\n  /**\n   * When the width changes, save it to state. This helps with left/width calculations.\n   */\n  onWidthChange(width) {\n    this.setState({width: width});\n  },\n\n  /**\n   * When dragging starts\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDragStart(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n\n    // No need to clone, `l` hasn't changed.\n    this.props.onDragStart(layout, l, l, null, e);\n  },\n  /**\n   * Each drag movement create a new dragelement and move the element to the dragged location\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information   \n   */\n  onDrag(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    // Clone layout item so we can pass it to the callback.\n    var oldL = utils.clone(l);\n\n    // Create placeholder (display only)\n    var placeholder = {\n      w: l.w, h: l.h, x: l.x, y: l.y, placeholder: true, i: i\n    };\n\n    // Move the element to the dragged location.\n    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\n    this.props.onDrag(layout, oldL, l, placeholder, e);\n\n\n    this.setState({\n      layout: utils.compact(layout),\n      activeDrag: placeholder\n    });\n  },\n\n  /**\n   * When dragging stops, figure out which position the element is closest to and update its x and y.\n   * @param  {Number} i Index of the child.\n   * @param {Number} i Index of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} element The current dragging DOM element\n   * @param {Object} position Drag information\n   */\n  onDragStop(i, x, y, {e, element, position}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = utils.clone(l);\n\n    // Move the element here\n    layout = utils.moveElement(layout, l, x, y, true /* isUserAction */);\n\n    this.props.onDragStop(layout, oldL, l, null, e);\n\n    // Set state\n    this.setState({layout: utils.compact(layout), activeDrag: null});\n  },\n\n  onResizeStart(i, w, h, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n\n    // No need to clone, item hasn't changed\n    this.props.onResizeStart(layout, l, l, null, e);\n  },\n\n  onResize(i, w, h, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = utils.clone(l);\n\n    // Set new width and height.\n    l.w = w;\n    l.h = h;\n    \n    // Create placeholder element (display only)\n    var placeholder = {\n      w: w, h: h, x: l.x, y: l.y, placeholder: true, i: i\n    };\n\n    this.props.onResize(layout, oldL, l, placeholder, e);\n    \n    // Re-compact the layout and set the drag placeholder.\n    this.setState({layout: utils.compact(layout), activeDrag: placeholder});\n  },\n\n  onResizeStop(i, x, y, {e, element, size}) {\n    var layout = this.state.layout;\n    var l = utils.getLayoutItem(layout, i);\n    var oldL = utils.clone(l);\n        \n    this.props.onResizeStop(layout, oldL, l, null, e);\n\n    this.setState({activeDrag: null, layout: utils.compact(layout)});\n  },\n\n  /**\n   * Create a placeholder object.\n   * @return {Element} Placeholder div.\n   */\n  placeholder() {\n    if (!this.state.activeDrag) return '';\n\n    // {...this.state.activeDrag} is pretty slow, actually\n    return (\n      <GridItem\n        w={this.state.activeDrag.w}\n        h={this.state.activeDrag.h}\n        x={this.state.activeDrag.x}\n        y={this.state.activeDrag.y}\n        i={this.state.activeDrag.i}\n        isPlaceholder={true}\n        className=\"react-grid-placeholder\"\n        containerWidth={this.state.width}\n        cols={this.props.cols}\n        margin={this.props.margin}\n        rowHeight={this.props.rowHeight}\n        isDraggable={false}\n        isResizable={false}\n        useCSSTransforms={this.props.useCSSTransforms}\n        >\n        <div />\n      </GridItem>\n    );\n  },\n\n  /**\n   * Given a grid item, set its style attributes & surround in a <Draggable>.\n   * @param  {Element} child React element.\n   * @param  {Number}  i     Index of element.\n   * @return {Element}       Element wrapped in draggable and properly placed.\n   */\n  processGridItem(child) {\n    var i = child.key;\n    var l = utils.getLayoutItem(this.state.layout, i);\n\n    // watchStart property tells Draggable to react to changes in the start param\n    // Must be turned off on the item we're dragging as the changes in `activeDrag` cause rerenders\n    var drag = this.state.activeDrag;\n    var moveOnStartChange = drag && drag.i === i ? false : true;\n\n    // Parse 'static'. Any properties defined directly on the grid item will take precedence.\n    var draggable, resizable;\n    if (l.static || this.props.isDraggable === false) draggable = false;\n    if (l.static || this.props.isResizable === false) resizable = false;\n\n    return (\n      <GridItem \n        containerWidth={this.state.width}\n        cols={this.props.cols}\n        margin={this.props.margin}\n        rowHeight={this.props.rowHeight}\n        moveOnStartChange={moveOnStartChange}\n        cancel={this.props.draggableCancel}\n        handle={this.props.draggableHandle}\n        onDragStop={this.onDragStop}\n        onDragStart={this.onDragStart}\n        onDrag={this.onDrag}\n        onResizeStart={this.onResizeStart}\n        onResize={this.onResize}\n        onResizeStop={this.onResizeStop}\n        isDraggable={draggable}\n        isResizable={resizable}\n        useCSSTransforms={this.props.useCSSTransforms && this.isMounted()}\n        usePercentages={!this.isMounted()}\n        {...l}\n        >\n        {child}\n      </GridItem>\n    );\n  },\n\n  render() {\n    // Calculate classname\n    var {className, ...props} = this.props;\n    className = 'react-grid-layout ' + (className || '');\n\n    return (\n      <div {...props} className={className} style={{height: this.containerHeight()}}>\n        {React.Children.map(this.props.children, this.processGridItem)}\n        {this.placeholder()}\n      </div>\n    );\n  }\n});\n\nmodule.exports = ReactGridLayout;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/ReactGridLayout.jsx\n **/","'use strict';\nvar React = require('react');\n\n/**\n * A simple mixin that provides facility for listening to container resizes.\n */\nvar WidthListeningMixin = {\n\n  propTypes: {\n    // This allows setting this on the server side\n    initialWidth: React.PropTypes.number,\n\n    // If false, you should supply width yourself. Good if you want to debounce resize events\n    // or reuse a handler from somewhere else.\n    listenToWindowResize: React.PropTypes.bool\n  },\n\n  getDefaultProps: function() {\n    return {\n      initialWidth: 1280,\n      listenToWindowResize: true\n    };\n  },\n\n  componentDidMount: function() {\n    if (this.props.listenToWindowResize) {\n      window.addEventListener('resize', this.onWindowResize);\n      // This is intentional. Once to properly set the breakpoint and resize the elements,\n      // and again to compensate for any scrollbar that appeared because of the first step.\n      this.onWindowResize();\n      this.onWindowResize();\n    }\n  },\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onWindowResize);\n  },\n\n  /**\n   * On window resize, update width.\n   */\n  onWindowResize: function() {\n    this.onWidthChange(this.getDOMNode().offsetWidth);\n  }\n\n};\n\nmodule.exports = WidthListeningMixin;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/mixins/WidthListeningMixin.js\n **/","'use strict';\n\nfunction ToObject(val) {\n\tif (val == null) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nmodule.exports = Object.assign || function (target, source) {\n\tvar from;\n\tvar keys;\n\tvar to = ToObject(target);\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = arguments[s];\n\t\tkeys = Object.keys(Object(from));\n\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tto[keys[i]] = from[keys[i]];\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/object-assign/index.js\n ** module id = 10\n ** module chunks = 0\n **/","\"use strict\";\nvar React = require(\"react\");\nvar Draggable = require(\"react-draggable\");\nvar assign = require(\"object-assign\");\nvar PureRenderMixin = require(\"react/lib/ReactComponentWithPureRenderMixin\");\nvar cloneWithProps = require(\"react/lib/cloneWithProps\");\n\nvar Resizable = module.exports = React.createClass({\n  displayName: \"Resizable\",\n  mixins: [PureRenderMixin],\n\n  propTypes: {\n    children: React.PropTypes.element,\n    // Functions\n    onResizeStop: React.PropTypes.func,\n    onResizeStart: React.PropTypes.func,\n    onResize: React.PropTypes.func,\n\n    width: React.PropTypes.number.isRequired,\n    height: React.PropTypes.number.isRequired,\n    // If you change this, be sure to update your css\n    handleSize: React.PropTypes.array,\n    // These will be passed wholesale to react-draggable\n    draggableOpts: React.PropTypes.object\n  },\n\n  getDefaultProps: function () {\n    return {\n      handleSize: [20, 20]\n    };\n  },\n\n  minConstraints: function () {\n    return parseConstraints(this.props.minConstraints, this.props.handleSize[0]) || this.props.handleSize;\n  },\n\n  maxConstraints: function () {\n    return parseConstraints(this.props.maxConstraints, this.props.handleSize[1]);\n  },\n\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * \n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  resizeHandler: function (handlerName) {\n    var me = this;\n    return function (e, _ref) {\n      var element = _ref.element;\n      var position = _ref.position;\n      me.props[handlerName] && me.props[handlerName](e, { element: element, size: calcWH(position, me.props.handleSize) });\n    };\n  },\n\n  render: function () {\n    var p = this.props;\n    // What we're doing here is getting the child of this element, and cloning it with this element's props.\n    // We are then defining its children as:\n    // Its original children (resizable's child's children), and\n    // A draggable handle.\n\n    return cloneWithProps(p.children, assign({}, p, {\n      children: [p.children.props.children, React.createElement(Draggable, React.__spread({}, p.draggableOpts, {\n        start: { x: p.width - 20, y: p.height - 20 },\n        moveOnStartChange: true,\n        onStop: this.resizeHandler(\"onResizeStop\"),\n        onStart: this.resizeHandler(\"onResizeStart\"),\n        onDrag: this.resizeHandler(\"onResize\"),\n        minConstraints: this.minConstraints(),\n        maxConstraints: this.maxConstraints()\n      }), React.createElement(\"span\", {\n        className: \"react-resizable-handle\"\n      }))]\n    }));\n  }\n});\n\n/**\n * Parse left and top coordinates; we have to add the handle size to get the full picture.\n * @param  {Number} options.left Left coordinate.\n * @param  {Number} options.top  Top coordinate.\n * @param  {Array}  handleSize   Handle data.\n * @return {Object}              Coordinates\n */\nfunction calcWH(_ref2, handleSize) {\n  var left = _ref2.left;\n  var top = _ref2.top;\n  return { width: left + handleSize[0], height: top + handleSize[1] };\n}\n\n/**\n * Constraints must be subtracted by the size of the handle to work properly.\n * This has a side-effect of effectively limiting the minimum size to the handleSize,\n * which IMO is fine.\n * @param  {Array} constraints Constraints array.\n * @param  {Array} handleSize  Handle size array.\n * @return {Array}             Transformed constraints.\n */\nfunction parseConstraints(constraints, handleSize) {\n  if (!constraints) return;\n  return constraints.map(function (c) {\n    return c - handleSize;\n  });\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/build/Resizable.js\n ** module id = 11\n ** module chunks = 0\n **/","/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Object.assign\n */\n\n// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign\n\nfunction assign(target, sources) {\n  if (target == null) {\n    throw new TypeError('Object.assign target cannot be null or undefined');\n  }\n\n  var to = Object(target);\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {\n    var nextSource = arguments[nextIndex];\n    if (nextSource == null) {\n      continue;\n    }\n\n    var from = Object(nextSource);\n\n    // We don't currently support accessors nor proxies. Therefore this\n    // copy cannot throw. If we ever supported this then we must handle\n    // exceptions and side-effects. We don't support symbols so they won't\n    // be transferred.\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n  }\n\n  return to;\n};\n\nmodule.exports = assign;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/Object.assign.js\n ** module id = 12\n ** module chunks = 0\n **/","'use strict';\nvar React = require('react');\nvar cloneWithProps = require('react/lib/cloneWithProps');\nvar utils = require('./utils');\nvar Draggable = require('react-draggable');\nvar Resizable = require('react-resizable').Resizable;\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\n\n/**\n * An individual item within a ReactGridLayout.\n */\nvar GridItem = React.createClass({\n  mixins: [PureDeepRenderMixin],\n\n  propTypes: {\n    // General grid attributes\n    cols: React.PropTypes.number.isRequired,\n    containerWidth: React.PropTypes.number.isRequired,\n    rowHeight: React.PropTypes.number.isRequired,\n    margin: React.PropTypes.array.isRequired,\n\n    // These are all in grid units\n    x: React.PropTypes.number.isRequired,\n    y: React.PropTypes.number.isRequired,\n    w: React.PropTypes.number.isRequired,\n    h: React.PropTypes.number.isRequired,\n\n    // All optional\n    minW: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.minW > props.w || props.minW > props.maxW) constraintError('minW', props);\n    },\n    maxW: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.maxW < props.w || props.maxW < props.minW) constraintError('maxW', props);\n    },\n    minH: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.minH > props.h || props.minH > props.maxH) constraintError('minH', props);\n    },\n    maxH: function(props, propName, componentName) {\n      React.PropTypes.number.apply(this, arguments);\n      if (props.maxH < props.h || props.maxH < props.minH) constraintError('maxH', props);\n    },\n\n    // ID is nice to have for callbacks\n    i: React.PropTypes.string.isRequired,\n\n    // If true, item will be repositioned when x/y/w/h change\n    moveOnStartChange: React.PropTypes.bool,\n\n    // Functions\n    onDragStop: React.PropTypes.func,\n    onDragStart: React.PropTypes.func,\n    onDrag: React.PropTypes.func,\n    onResizeStop: React.PropTypes.func,\n    onResizeStart: React.PropTypes.func,\n    onResize: React.PropTypes.func,\n\n    // Flags\n    isDraggable: React.PropTypes.bool,\n    isResizable: React.PropTypes.bool,\n    // Use CSS transforms instead of top/left\n    useCSSTransforms: React.PropTypes.bool,\n    isPlaceholder: React.PropTypes.bool,\n\n    // Others\n    className: React.PropTypes.string,\n    // Selector for draggable handle\n    handle: React.PropTypes.string,\n    // Selector for draggable cancel (see react-draggable)\n    cancel: React.PropTypes.string\n  },\n\n  getDefaultProps() {\n    return {\n      isDraggable: true,\n      isResizable: true,\n      useCSSTransforms: true,\n      className: '',\n      cancel: '',\n      minH: 1,\n      minW: 1,\n      maxH: Infinity,\n      maxW: Infinity\n    };\n  },\n\n  getInitialState() {\n    return {\n      resizing: false,\n      className: ''\n    };\n  },\n\n  /**\n   * Return position on the page given an x, y, w, h.\n   * left, top, width, height are all in pixels.\n   * @param  {Number}  x             X coordinate in grid units.\n   * @param  {Number}  y             Y coordinate in grid units.\n   * @param  {Number}  w             W coordinate in grid units.\n   * @param  {Number}  h             H coordinate in grid units.\n   * @return {Object}                Object containing coords.\n   */\n  calcPosition(x, y, w, h) {\n    var p = this.props;\n    var width = p.containerWidth - p.margin[0];\n    var out = {\n      left: width * (x / p.cols) + p.margin[0],\n      top: p.rowHeight * y + p.margin[1],\n      width: width * (w / p.cols) - p.margin[0],\n      height: h * p.rowHeight - p.margin[1]\n    };\n    return out;\n  },\n\n  /**\n   * Translate x and y coordinates from pixels to grid units.\n   * @param  {Number} options.left  Left offset in pixels.\n   * @param  {Number} options.top   Top offset in pixels.\n   * @return {Object}               x and y in grid units.\n   */\n  calcXY({left, top}) {\n    left = left - this.props.margin[0];\n    top = top - this.props.margin[1];\n    // This is intentional; because so much of the logic on moving boxes up/down relies\n    // on an exact y position, we only round the x, not the y.\n    var x = Math.round((left / this.props.containerWidth) * this.props.cols);\n    var y = Math.floor(top / this.props.rowHeight);\n    x = Math.max(Math.min(x, this.props.cols), 0);\n    y = Math.max(y, 0);\n    return {x, y};\n  },\n\n  /**\n   * Given a height and width in pixel values, calculate grid units.\n   * @param  {Number} options.height Height in pixels.\n   * @param  {Number} options.width  Width in pixels.\n   * @return {Object}                w, h as grid units.\n   */\n  calcWH({height, width}) {\n    width = width + this.props.margin[0];\n    height = height + this.props.margin[1];\n    var w = Math.round((width / this.props.containerWidth) * this.props.cols);\n    var h = Math.round(height / this.props.rowHeight);\n    w = Math.max(Math.min(w, this.props.cols - this.props.x), 0);\n    h = Math.max(h, 0);\n    return {w, h};\n  },\n\n  /**\n   * Mix a Draggable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Draggable.\n   */\n  mixinDraggable(child, position) {\n    return (\n      <Draggable\n        start={{x: position.left, y: position.top}}\n        moveOnStartChange={this.props.moveOnStartChange}\n        onStop={this.onDragHandler('onDragStop')}\n        onStart={this.onDragHandler('onDragStart')}\n        onDrag={this.onDragHandler('onDrag')}\n        handle={this.props.handle}\n        cancel={\".react-resizable-handle \" + this.props.cancel}\n        useCSSTransforms={this.props.useCSSTransforms}\n        >\n        {child}\n      </Draggable>\n    );\n  },\n\n  /**\n   * Mix a Resizable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Resizable.\n   */\n  mixinResizable(child, position) {\n    var p = this.props;\n    // This is the max possible width - doesn't go to infinity because of the width of the window\n    var maxWidth = this.calcPosition(0, 0, p.cols - p.x, 0).width;\n\n    // Calculate min/max constraints using our min & maxes\n    var mins = this.calcPosition(0, 0, p.minW, p.minH);\n    var maxes = this.calcPosition(0, 0, p.maxW, p.maxH);\n    var minConstraints = [mins.width, mins.height];\n    var maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n    return (\n      <Resizable\n        width={position.width}\n        height={position.height}\n        minConstraints={minConstraints}\n        maxConstraints={maxConstraints}\n        onResizeStop={this.onResizeHandler('onResizeStop')}\n        onResizeStart={this.onResizeHandler('onResizeStart')}\n        onResize={this.onResizeHandler('onResize')}\n        >\n        {child}\n      </Resizable>\n    );\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * All drag events call the function with the given handler name,\n   * with the signature (index, x, y).\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  onDragHandler(handlerName) {\n    var me = this;\n    return function(e, {element, position}) {\n      if (!me.props[handlerName]) return;\n      // Get new XY\n      var {x, y} = me.calcXY(position);\n\n      // Cap x at numCols\n      x = Math.min(x, me.props.cols - me.props.w);\n\n      me.props[handlerName](me.props.i, x, y, {e, element, position});\n    };\n  },\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * All drag events call the function with the given handler name,\n   * with the signature (index, x, y).\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  onResizeHandler(handlerName) {\n    var me = this;\n    return function(e, {element, size}) {\n      if (!me.props[handlerName]) return;\n\n      // Get new XY\n      var {w, h} = me.calcWH(size);\n\n      // Cap w at numCols\n      w = Math.min(w, me.props.cols - me.props.x);\n      // Ensure w is at least 1\n      w = Math.max(w, 1);\n\n      // Min/max capping\n      w = Math.max(Math.min(w, me.props.maxW), me.props.minW);\n      h = Math.max(Math.min(h, me.props.maxH), me.props.minH);\n\n      me.setState({resizing: handlerName === 'onResizeStop' ? null : size});\n\n      me.props[handlerName](me.props.i, w, h, {e, element, size});\n    };\n  },\n\n  render() {\n    var p = this.props, pos = this.calcPosition(p.x, p.y, p.w, p.h);\n    if (this.state.resizing) {\n      pos.width = this.state.resizing.width;\n      pos.height = this.state.resizing.height;\n    }\n\n    var child = cloneWithProps(React.Children.only(this.props.children), {\n      // Munge a classname. Use passed in classnames and resizing.\n      // React with merge the classNames.\n      className: ['react-grid-item', this.props.className, this.state.resizing ? 'resizing' : '',\n        this.props.useCSSTransforms ? 'cssTransforms' : ''].join(' '),\n      // We can set the width and height on the child, but unfortunately we can't set the position.\n      style: {\n        width: pos.width + 'px',\n        height: pos.height + 'px',\n        left: pos.left + 'px',\n        top: pos.top + 'px',\n        position: 'absolute'\n      }\n    });\n\n    // This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n    // well when server rendering, and the only way to do that properly is to use percentage width/left because\n    // we don't know exactly what the browser viewport is.\n    //\n    // Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n    // left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n\n    // This is used for server rendering.\n    if (this.props.usePercentages) {\n      pos.left = utils.perc(pos.left / p.containerWidth);\n      child.props.style.left = pos.left;\n      child.props.style.width = utils.perc(pos.width / p.containerWidth);\n    }\n\n    // CSS Transforms support\n    if (this.props.useCSSTransforms) {\n      utils.setTransform(child.props.style, [pos.left, pos.top]);\n      delete child.props.style.left;\n      delete child.props.style.top;\n    }\n\n    // Resizable support. This is usually on but the user can toggle it off.\n    if (this.props.isResizable) {\n      child = this.mixinResizable(child, pos);\n    }\n\n    // Draggable support. This is always on, except for with placeholders.\n    if (this.props.isDraggable) {\n      child = this.mixinDraggable(child, pos);\n    }\n\n    return child;\n  }\n});\n\nfunction constraintError(name, props) {\n  delete props.children;\n  throw new Error(name + ' overrides contraints on gridItem ' + props.i + '. Full props: ' + JSON.stringify(props));\n}\n\nmodule.exports = GridItem;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/GridItem.jsx\n **/","'use strict';\nvar React = require('react');\nvar utils = require('./utils');\nvar responsiveUtils = require('./responsiveUtils');\nvar PureDeepRenderMixin = require('./mixins/PureDeepRenderMixin');\nvar WidthListeningMixin = require('./mixins/WidthListeningMixin');\nvar ReactGridLayout = require('./ReactGridLayout');\n\n/**\n * A wrapper around ReactGridLayout to support responsive breakpoints.\n */\nvar ResponsiveReactGridLayout = React.createClass({\n  mixins: [PureDeepRenderMixin, WidthListeningMixin],\n\n  propTypes: {\n    //\n    // Basic props\n    //\n\n    // Optional, but if you are managing width yourself you may want to set the breakpoint\n    // yourself as well.\n    breakpoint: React.PropTypes.string,\n\n    // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\n    breakpoints: React.PropTypes.object,\n\n    // # of cols. This is a breakpoint -> cols map\n    cols: React.PropTypes.object,\n\n    // layouts is an object mapping breakpoints to layouts.\n    // e.g. {lg: Layout, md: Layout, ...}\n    layouts: function(props, propName, componentName) {\n      React.PropTypes.object.isRequired.apply(this, arguments);\n\n      var layouts = props.layouts;\n      Object.keys(layouts).map(function(k) {\n        utils.validateLayout(layouts[k], 'layouts.' + k);\n      });\n    },\n\n    //\n    // Callbacks\n    //\n\n    // Calls back with breakpoint and new # cols\n    onBreakpointChange: React.PropTypes.func,\n\n    // Callback so you can save the layout.\n    // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n    onLayoutChange: React.PropTypes.func\n  },\n\n  getDefaultProps() {\n    return {\n      breakpoints: {lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0},\n      cols: {lg: 12, md: 10, sm: 6, xs: 4, xxs: 2},\n      layouts: {},\n      onBreakpointChange: function(){},\n      onLayoutChange: function(){}\n    };\n  },\n\n  getInitialState() {\n    var breakpoint = this.props.breakpoint ||\n      responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, this.props.initialWidth);\n    var cols = responsiveUtils.getColsFromBreakpoint(breakpoint, this.props.cols);\n\n    // Get the initial layout. This can tricky; we try to generate one however possible if one doesn't exist\n    // for this layout.\n    var initialLayout = responsiveUtils.findOrGenerateResponsiveLayout(\n      this.props.layouts, this.props.breakpoints, breakpoint, breakpoint, cols);\n\n    return {\n      layout: initialLayout,\n      // storage for layouts obsoleted by breakpoints\n      layouts: this.props.layouts || {},\n      breakpoint: breakpoint,\n      cols: cols,\n      width: this.props.initialWidth\n    };\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // This allows you to set the width manually if you like.\n    // Use manual width changes in combination with `listenToWindowResize: false`\n    if (nextProps.width) this.onWidthChange(nextProps.width);\n\n    // Allow parent to set breakpoint directly.\n    if (nextProps.breakpoint !== this.props.breakpoint) {\n      this.onWidthChange(this.state.width);\n    }\n\n    // Allow parent to set layouts directly.\n    if (nextProps.layouts && nextProps.layouts !== this.state.layouts) {\n      // Since we're setting an entirely new layout object, we must generate a new responsive layout\n      // if one does not exist.\n      var newLayout = responsiveUtils.findOrGenerateResponsiveLayout(\n        nextProps.layouts, nextProps.breakpoints, this.state.breakpoint, this.state.breakpoint, this.state.cols);\n\n      this.setState({\n        layouts: nextProps.layouts,\n        layout: newLayout\n      });\n    }\n  },\n\n  /**\n   * Bubble this up, add `layouts` object.\n   * @param  {Array} layout Layout from inner Grid.\n   */\n  onLayoutChange(layout) {\n    this.state.layouts[this.state.breakpoint] = layout;\n    this.setState({layout: layout, layouts: this.state.layouts});\n    this.props.onLayoutChange(layout, this.state.layouts);\n  },\n\n  /**\n   * When the width changes work through breakpoints and reset state with the new width & breakpoint.\n   * Width changes are necessary to figure out the widget widths.\n   */\n  onWidthChange(width) {\n    // Set new breakpoint\n    var newState = {width: width};\n    newState.breakpoint = this.props.breakpoint ||\n      responsiveUtils.getBreakpointFromWidth(this.props.breakpoints, newState.width);\n    newState.cols = responsiveUtils.getColsFromBreakpoint(newState.breakpoint, this.props.cols);\n\n    // Breakpoint change\n    if (newState.cols !== this.state.cols) {\n\n      // Store the current layout\n      newState.layouts = this.state.layouts;\n      newState.layouts[this.state.breakpoint] = JSON.parse(JSON.stringify(this.state.layout));\n\n      // Find or generate a new one.\n      newState.layout = responsiveUtils.findOrGenerateResponsiveLayout(\n        newState.layouts, this.props.breakpoints, newState.breakpoint, this.state.breakpoint, newState.cols);\n\n      // This adds missing items.\n      newState.layout = utils.synchronizeLayoutWithChildren(newState.layout, this.props.children, newState.cols);\n\n      // Store this new layout as well.\n      newState.layouts[newState.breakpoint] = newState.layout;\n\n      this.props.onBreakpointChange(newState.breakpoint, newState.cols);\n    }\n\n    this.setState(newState);\n  },\n\n\n  render() {\n    // Don't pass responsive props to RGL.\n    /*jshint unused:false*/\n    var {layouts, onBreakpointChange, breakpoints, ...props} = this.props;\n    return (\n      <ReactGridLayout {...props}\n          layout={this.state.layout}\n          cols={this.state.cols}\n          listenToWindowResize={false}\n          onLayoutChange={this.onLayoutChange}\n          width={this.state.width}>\n        {this.props.children}\n      </ReactGridLayout>\n    );\n  }\n});\n\nmodule.exports = ResponsiveReactGridLayout;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/ResponsiveReactGridLayout.jsx\n **/","'use strict';\n\nvar utils = require('./utils');\n\nvar responsiveUtils = module.exports = {\n\n  /**\n   * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n   *\n   * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n   * @param  {Number} width Screen width.\n   * @return {String}       Highest breakpoint that is less than width.\n   */\n  getBreakpointFromWidth(breakpoints, width) {\n    var sorted = responsiveUtils.sortBreakpoints(breakpoints);\n    var matching = sorted[0];\n    for (var i = 1, len = sorted.length; i < len; i++) {\n      var breakpointName = sorted[i];\n      if (width > breakpoints[breakpointName]) matching = breakpointName;\n    }\n    return matching;\n  },\n\n\n  /**\n   * Given a breakpoint, get the # of cols set for it.\n   * @param  {String} breakpoint Breakpoint name.\n   * @param  {Object} cols       Map of breakpoints to cols.\n   * @return {Number}            Number of cols.\n   */\n  getColsFromBreakpoint(breakpoint, cols) {\n    if (!cols[breakpoint]) {\n      throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n    }\n    return cols[breakpoint];\n  },\n\n  /**\n   * Given existing layouts and a new breakpoint, find or generate a new layout.\n   *\n   * This finds the layout above the new one and generates from it, if it exists.\n   *\n   * @param  {Array} layouts     Existing layouts.\n   * @param  {Array} breakpoints All breakpoints.\n   * @param  {String} breakpoint New breakpoint.\n   * @param  {String} breakpoint Last breakpoint (for fallback).\n   * @param  {Number} cols       Column count at new breakpoint.\n   * @return {Array}             New layout.\n   */\n  findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols) {\n    // If it already exists, just return it.\n    if (layouts[breakpoint]) return layouts[breakpoint];\n    // Find or generate the next layout\n    var layout = layouts[lastBreakpoint];\n    var breakpointsSorted = responsiveUtils.sortBreakpoints(breakpoints);\n    var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n    for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n      var b = breakpointsAbove[i];\n      if (layouts[b]) {\n        layout = layouts[b];\n        break;\n      }\n    }\n    layout = JSON.parse(JSON.stringify(layout || [])); // clone layout so we don't modify existing items\n    return utils.compact(utils.correctBounds(layout, {cols: cols}));\n  },\n\n\n  /**\n   * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n   * e.g. ['xxs', 'xs', 'sm', ...]\n   *\n   * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n   * @return {Array}              Sorted breakpoints.\n   */\n  sortBreakpoints(breakpoints) {\n    var keys = Object.keys(breakpoints);\n    return keys.sort(function(a, b) {\n      return breakpoints[a] - breakpoints[b];\n    });\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/responsiveUtils.js\n **/","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/index.js\n ** module id = 16\n ** module chunks = 0\n **/","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/lib/is_arguments.js\n ** module id = 17\n ** module chunks = 0\n **/","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deep-equal/lib/keys.js\n ** module id = 18\n ** module chunks = 0\n **/","'use strict';\n\nvar React = require('react');\nvar PureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');\nvar emptyFunction = require('react/lib/emptyFunction');\nvar cloneWithProps = require('react/lib/cloneWithProps');\n\nfunction createUIEvent(draggable) {\n\treturn {\n\t\telement: draggable.getDOMNode(),\n\t\tposition: {\n\t\t\ttop: (draggable._pendingState || draggable.state).clientY,\n\t\t\tleft: (draggable._pendingState || draggable.state).clientX\n\t\t}\n\t};\n}\n\nfunction canDragY(draggable) {\n\treturn draggable.props.axis === 'both' ||\n\t\t\tdraggable.props.axis === 'y';\n}\n\nfunction canDragX(draggable) {\n\treturn draggable.props.axis === 'both' ||\n\t\t\tdraggable.props.axis === 'x';\n}\n\nfunction isFunction(func) {\n  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n}\n\n// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\nfunction findInArray(array, callback) {\n  for (var i = 0, length = array.length, element = null; i < length, element = array[i]; i++) {\n    if (callback.apply(callback, [element, i, array])) return element;\n  }\n}\n\nfunction matchesSelector(el, selector) {\n  var method = findInArray([\n    'matches',\n    'webkitMatchesSelector',\n    'mozMatchesSelector',\n    'msMatchesSelector',\n    'oMatchesSelector'\n  ], function(method){\n    return isFunction(el[method]);\n  });\n\n  return el[method].call(el, selector);\n}\n\nfunction positionToCSSTransform(style) {\n\t// Replace unitless items with px\n\tvar x = ('' + style.left).replace(/(\\d)$/, '$1px');\n\tvar y = ('' + style.top).replace(/(\\d)$/, '$1px');\n\tstyle.transform = 'translate(' + x + ',' + y + ')';\n\tstyle.WebkitTransform = 'translate(' + x + ',' + y + ')';\n\tstyle.OTransform = 'translate(' + x + ',' + y + ')';\n\tstyle.msTransform = 'translate(' + x + ',' + y + ')';\n\tstyle.MozTransform = 'translate(' + x + ',' + y + ')';\n\tdelete style.left;\n\tdelete style.top;\n\treturn style;\n}\n\n// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886\n/* Conditional to fix node server side rendering of component */\nif (typeof window === 'undefined') {\n    // Do Node Stuff\n    var isTouchDevice = false;\n} else {\n    // Do Browser Stuff\n    var isTouchDevice = 'ontouchstart' in window || // works on most browsers\n      'onmsgesturechange' in window; // works on ie10 on ms surface\n}\n\n// look ::handleDragStart\n//function isMultiTouch(e) {\n//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1\n//}\n\n/**\n * simple abstraction for dragging events names\n * */\nvar dragEventFor = (function () {\n  var eventsFor = {\n    touch: {\n      start: 'touchstart',\n      move: 'touchmove',\n      end: 'touchend'\n    },\n    mouse: {\n      start: 'mousedown',\n      move: 'mousemove',\n      end: 'mouseup'\n    }\n  };\n  return eventsFor[isTouchDevice ? 'touch' : 'mouse'];\n})();\n\n/**\n * get {clientX, clientY} positions of control\n * */\nfunction getControlPosition(e) {\n  var position = (e.touches && e.touches[0]) || e;\n  return {\n    clientX: position.clientX,\n    clientY: position.clientY\n  };\n}\n\nfunction addEvent(el, event, handler) {\n\tif (!el) { return; }\n\tif (el.attachEvent) {\n\t\tel.attachEvent('on' + event, handler);\n\t} else if (el.addEventListener) {\n\t\tel.addEventListener(event, handler, true);\n\t} else {\n\t\tel['on' + event] = handler;\n\t}\n}\n\nfunction removeEvent(el, event, handler) {\n\tif (!el) { return; }\n\tif (el.detachEvent) {\n\t\tel.detachEvent('on' + event, handler);\n\t} else if (el.removeEventListener) {\n\t\tel.removeEventListener(event, handler, true);\n\t} else {\n\t\tel['on' + event] = null;\n\t}\n}\n\nmodule.exports = React.createClass({\n\tdisplayName: 'Draggable',\n\tmixins: [PureRenderMixin],\n\n\tpropTypes: {\n\t\t/**\n\t\t * `axis` determines which axis the draggable can move.\n\t\t *\n\t\t * 'both' allows movement horizontally and vertically.\n\t\t * 'x' limits movement to horizontal axis.\n\t\t * 'y' limits movement to vertical axis.\n\t\t *\n\t\t * Defaults to 'both'.\n\t\t */\n\t\taxis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\n\t\t/**\n\t\t * `handle` specifies a selector to be used as the handle that initiates drag.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t    \treturn (\n\t\t * \t    \t \t<Draggable handle=\".handle\">\n\t\t * \t    \t \t  <div>\n\t\t * \t    \t \t      <div className=\"handle\">Click me to drag</div>\n\t\t * \t    \t \t      <div>This is some other content</div>\n\t\t * \t    \t \t  </div>\n\t\t * \t    \t\t</Draggable>\n\t\t * \t    \t);\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\thandle: React.PropTypes.string,\n\n\t\t/**\n\t\t * `cancel` specifies a selector to be used to prevent drag initialization.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return(\n\t\t * \t            <Draggable cancel=\".cancel\">\n\t\t * \t                <div>\n\t\t * \t                \t<div className=\"cancel\">You can't drag from here</div>\n\t\t *\t\t\t\t\t\t<div>Dragging here works fine</div>\n\t\t * \t                </div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tcancel: React.PropTypes.string,\n\n\t\t/**\n\t\t * `grid` specifies the x and y that dragging should snap to.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return (\n\t\t * \t            <Draggable grid={[25, 25]}>\n\t\t * \t                <div>I snap to a 25 x 25 grid</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tgrid: React.PropTypes.arrayOf(React.PropTypes.number),\n\n\t\t/**\n\t\t * `start` specifies the x and y that the dragged item should start at\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return (\n\t\t * \t            <Draggable start={{x: 25, y: 25}}>\n\t\t * \t                <div>I start with left: 25px; top: 25px;</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tstart: React.PropTypes.object,\n\n\t\t/**\n\t\t * `moveOnStartChange` tells the Draggable element to reset its position\n\t\t * if the `start` parameters are changed. By default, if the `start` \n\t\t * parameters change, the Draggable element still remains where it started\n\t\t * or was dragged to.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t\t\tonButtonClick: function () {\n\t\t * \t\t\t\tthis.setState({clicked: true});\n\t\t * \t\t\t},\n\t\t * \t    render: function () {\n\t\t * \t    \t\tvar start = this.state.clicked ?\n\t\t * \t    \t\t  {x: 25, y: 25} :\n\t\t * \t    \t\t  {x: 125, y: 125};\n\t\t * \t        return (\n\t\t * \t            <Draggable start={start}>\n\t\t * \t                <div>I start with left: 25px; top: 25px;,\n\t\t * \t                but move to left: 125px; top: 125px; when the button\n\t\t * \t                is clicked.</div>\n\t\t * \t                <div onClick={this.onButtonClick}>Button</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tmoveOnStartChange: React.PropTypes.bool,\n\n\t\t/**\n\t\t * `useCSSTransforms` if true will place the element using translate(x, y)\n\t\t * rather than CSS top/left.\n\t\t *\n\t\t * This generally gives better performance, and is useful in combination with\n\t\t * other layout systems that use translate(), such as react-grid-layout.\n\t\t */\n\t\tuseCSSTransforms: React.PropTypes.bool,\n\n\t\t/**\n\t\t * `zIndex` specifies the zIndex to use while dragging.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return (\n\t\t * \t            <Draggable zIndex={100}>\n\t\t * \t                <div>I have a zIndex</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tzIndex: React.PropTypes.number,\n\n\t\t/**\n\t\t * Called when dragging starts.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```js\n\t\t *\tfunction (event, ui) {}\n\t\t * ```\n\t\t *\n\t\t * `event` is the Event that was triggered.\n\t\t * `ui` is an object:\n\t\t *\n\t\t * ```js\n\t\t *\t{\n\t\t *\t\tposition: {top: 0, left: 0}\n\t\t *\t}\n\t\t * ```\n\t\t */\n\t\tonStart: React.PropTypes.func,\n\n\t\t/**\n\t\t * Called while dragging.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```js\n\t\t *\tfunction (event, ui) {}\n\t\t * ```\n\t\t *\n\t\t * `event` is the Event that was triggered.\n\t\t * `ui` is an object:\n\t\t *\n\t\t * ```js\n\t\t *\t{\n\t\t *\t\tposition: {top: 0, left: 0}\n\t\t *\t}\n\t\t * ```\n\t\t */\n\t\tonDrag: React.PropTypes.func,\n\n\t\t/**\n\t\t * Called when dragging stops.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```js\n\t\t *\tfunction (event, ui) {}\n\t\t * ```\n\t\t *\n\t\t * `event` is the Event that was triggered.\n\t\t * `ui` is an object:\n\t\t *\n\t\t * ```js\n\t\t *\t{\n\t\t *\t\tposition: {top: 0, left: 0}\n\t\t *\t}\n\t\t * ```\n\t\t */\n\t\tonStop: React.PropTypes.func,\n\n\t\t/**\n\t\t * A workaround option which can be passed if onMouseDown needs to be accessed, \n\t\t * since it'll always be blocked (due to that there's internal use of onMouseDown)\n\t\t *\n\t\t */\n\t\tonMouseDown: React.PropTypes.func\n\t},\n\n\tcomponentWillUnmount: function() {\n\t\t// Remove any leftover event handlers\n\t\tremoveEvent(window, dragEventFor['move'], this.handleDrag);\n\t\tremoveEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t},\n\n\tcomponentWillReceiveProps: function(nextProps) {\n\t\t// If this is set to watch a changing start position, \n\t\t// set x and y to the new position.\n\t\tif (nextProps.moveOnStartChange) {\n\t\t\tthis.setState({\n\t\t\t\tclientX: nextProps.start.x,\n\t\t\t\tclientY: nextProps.start.y\n\t\t\t});\n\t\t}\n\t},\n\n\tgetDefaultProps: function () {\n\t\treturn {\n\t\t\taxis: 'both',\n\t\t\thandle: null,\n\t\t\tcancel: null,\n\t\t\tgrid: null,\n\t\t\tstart: {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0\n\t\t\t},\n\t\t\tmoveOnStartChange: false,\n\t\t\tuseCSSTransforms: false,\n\t\t\tzIndex: NaN,\n\t\t\tonStart: emptyFunction,\n\t\t\tonDrag: emptyFunction,\n\t\t\tonStop: emptyFunction,\n\t\t\tonMouseDown: emptyFunction\n\t\t};\n\t},\n\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\t// Whether or not currently dragging\n\t\t\tdragging: false,\n\n\t\t\t// Start top/left of this.getDOMNode()\n\t\t\tstartX: 0, startY: 0,\n\n\t\t\t// Offset between start top/left and mouse top/left\n\t\t\toffsetX: 0, offsetY: 0,\n\n\t\t\t// Current top/left of this.getDOMNode()\n\t\t\tclientX: this.props.start.x, clientY: this.props.start.y\n\t\t};\n\t},\n\n\thandleDragStart: function (e) {\n    // todo: write right implementation to prevent multitouch drag\n    // prevent multi-touch events\n    // if (isMultiTouch(e)) {\n    //     this.handleDragEnd.apply(e, arguments);\n    //     return\n    // }\n\n\t\t// Make it possible to attach event handlers on top of this one\n\t\tthis.props.onMouseDown(e);\n\n\t\t// Only catch left clicks, if clicking\n\t\tif (typeof e.button === \"number\" && e.button !== 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar node = this.getDOMNode();\n\n\t\t// Short circuit if handle or cancel prop was provided and selector doesn't match\n\t\tif ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n\t\t\t(this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n\t\t\treturn;\n\t\t}\n\n    var dragPoint = getControlPosition(e);\n\n\t\t// Initiate dragging\n\t\tthis.setState({\n\t\t\tdragging: true,\n\t\t\toffsetX: parseInt(dragPoint.clientX, 10),\n\t\t\toffsetY: parseInt(dragPoint.clientY, 10),\n\t\t\tstartX: parseInt(this.state.clientX, 10) || 0,\n\t\t\tstartY: parseInt(this.state.clientY, 10) || 0\n\t\t});\n\n\t\t// Add a class to the body to disable user-select. This prevents text from \n\t\t// being selected all over the page.\n\t\tdocument.body.className += \" react-draggable-active\";\n\n\t\t// Call event handler\n\t\tthis.props.onStart(e, createUIEvent(this));\n\n\t\t// Add event handlers\n\t\taddEvent(window, dragEventFor['move'], this.handleDrag);\n\t\taddEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t},\n\n\thandleDragEnd: function (e) {\n\t\t// Short circuit if not currently dragging\n\t\tif (!this.state.dragging) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Turn off dragging\n\t\tthis.setState({\n\t\t\tdragging: false\n\t\t});\n\n\t\t// Remove the body class used to disable user-select.\n\t\tdocument.body.className = document.body.className.replace(\" react-draggable-active\", \"\");\n\n\t\t// Call event handler\n\t\tthis.props.onStop(e, createUIEvent(this));\n\n\t\t// Remove event handlers\n    removeEvent(window, dragEventFor['move'], this.handleDrag);\n    removeEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t},\n\n\thandleDrag: function (e) {\n    var dragPoint = getControlPosition(e);\n\n\t\t// Calculate top and left\n    var clientX = (this.state.startX + (dragPoint.clientX - this.state.offsetX));\n    var clientY = (this.state.startY + (dragPoint.clientY - this.state.offsetY));\n\n\t\t// Snap to grid if prop has been provided\n\t\tif (Array.isArray(this.props.grid)) {\n\t\t\tvar directionX = clientX < parseInt(this.state.clientX, 10) ? -1 : 1;\n\t\t\tvar directionY = clientY < parseInt(this.state.clientY, 10) ? -1 : 1;\n\n\t\t\tclientX = Math.abs(clientX - parseInt(this.state.clientX, 10)) >= this.props.grid[0]\n\t\t\t\t\t? (parseInt(this.state.clientX, 10) + (this.props.grid[0] * directionX))\n\t\t\t\t\t: parseInt(this.state.clientX, 10);\n\n\t\t\tclientY = Math.abs(clientY - parseInt(this.state.clientY, 10)) >= this.props.grid[1]\n\t\t\t\t\t? (parseInt(this.state.clientY, 10) + (this.props.grid[1] * directionY))\n\t\t\t\t\t: parseInt(this.state.clientY, 10);\n\t\t}\n\n\t\t// Min/max constraints\n\t\tif (Array.isArray(this.props.minConstraints)) {\n\t\t\tclientX = Math.max(this.props.minConstraints[0], clientX);\n\t\t\tclientY = Math.max(this.props.minConstraints[1], clientY);\n\t\t}\n\t\tif (Array.isArray(this.props.maxConstraints)) {\n\t\t\tclientX = Math.min(this.props.maxConstraints[0], clientX);\n\t\t\tclientY = Math.min(this.props.maxConstraints[1], clientY);\n\t\t}\n\n\t\t// Update top and left\n\t\tthis.setState({\n\t\t\tclientX: clientX,\n\t\t\tclientY: clientY\n\t\t});\n\n\t\t// Call event handler\n\t\tthis.props.onDrag(e, createUIEvent(this));\n\t},\n\n\trender: function () {\n\t\tvar style = {\n\t\t\t// Set top if vertical drag is enabled\n\t\t\ttop: canDragY(this)\n\t\t\t\t? this.state.clientY\n\t\t\t\t: this.state.startY,\n\n\t\t\t// Set left if horizontal drag is enabled\n\t\t\tleft: canDragX(this)\n\t\t\t\t? this.state.clientX\n\t\t\t\t: this.state.startX\n\t\t};\n\n\t\tif (this.props.useCSSTransforms) {\n\t\t\tstyle = positionToCSSTransform(style);\n\t\t}\n\n\t\t// Set zIndex if currently dragging and prop has been provided\n\t\tif (this.state.dragging && !isNaN(this.props.zIndex)) {\n\t\t\tstyle.zIndex = this.props.zIndex;\n\t\t}\n\n\t\t// Reuse the child provided\n\t\t// This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t\treturn cloneWithProps(React.Children.only(this.props.children), {\n\t\t\tstyle: style,\n\t\t\tclassName: 'react-draggable' + (this.state.dragging ? ' react-draggable-dragging' : ''),\n\n\t\t\tonMouseDown: this.handleDragStart,\n\t\t\tonTouchStart: function(ev){\n        ev.preventDefault(); // prevent for scroll\n        return this.handleDragStart.apply(this, arguments);\n      }.bind(this),\n\n\t\t\tonMouseUp: this.handleDragEnd,\n\t\t\tonTouchEnd: this.handleDragEnd\n\t\t});\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-draggable/lib/draggable.js\n ** module id = 20\n ** module chunks = 0\n **/","\"use strict\";\n\nvar _objectWithoutProperties = function (obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\n\"use strict\";\nvar React = require(\"react\");\nvar PureRenderMixin = require(\"react/lib/ReactComponentWithPureRenderMixin\");\nvar Resizable = require(\"./Resizable\");\n\n// An example use of Resizable.\nvar ResizableBox = module.exports = React.createClass({\n  displayName: \"ResizableBox\",\n  mixins: [PureRenderMixin],\n\n  propTypes: {},\n\n  getInitialState: function () {\n    return {\n      width: this.props.width,\n      height: this.props.height\n    };\n  },\n\n  onResize: function (event, _ref) {\n    var element = _ref.element;\n    var size = _ref.size;\n    if (size.width !== this.state.width || size.height !== this.state.height) {\n      this.setState({\n        width: size.width,\n        height: size.height\n      });\n    }\n  },\n\n  render: function () {\n    // Basic wrapper around a Resizable instance.\n    // If you use Resizable directly, you are responsible for updating the component\n    // with a new width and height.\n    var handleSize = this.props.handleSize;\n    var minConstraints = this.props.minConstraints;\n    var maxConstraints = this.props.maxConstraints;\n    var props = _objectWithoutProperties(this.props, [\"handleSize\", \"minConstraints\", \"maxConstraints\"]);\n\n    return React.createElement(Resizable, {\n      minConstraints: minConstraints,\n      maxConstraints: maxConstraints,\n      handleSize: handleSize,\n      width: this.state.width,\n      height: this.state.height,\n      onResize: this.onResize,\n      draggableOpts: this.props.draggableOpts\n    }, React.createElement(\"div\", React.__spread({\n      style: { width: this.state.width + \"px\", height: this.state.height + \"px\" }\n    }, props), this.props.children));\n  }\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/build/ResizableBox.js\n ** module id = 21\n ** module chunks = 0\n **/","module.exports = function() {\n  throw new Error(\"Don't instantiate Resizable directly! Use require('react-resizable').Resizable\");\n};\n\nmodule.exports.Resizable = require('./build/Resizable');\nmodule.exports.ResizableBox = require('./build/ResizableBox');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/index.js\n ** module id = 22\n ** module chunks = 0\n **/","'use strict';\n\n/** @jsx React.DOM */\nvar React = require('react');\nvar PureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');\nvar emptyFunction = require('react/lib/emptyFunction');\nvar cloneWithProps = require('react/lib/cloneWithProps');\n\nfunction createUIEvent(draggable) {\n\treturn {\n\t\telement: draggable.getDOMNode(),\n\t\tposition: {\n\t\t\ttop: (draggable._pendingState || draggable.state).clientY,\n\t\t\tleft: (draggable._pendingState || draggable.state).clientX\n\t\t}\n\t};\n}\n\nfunction canDragY(draggable) {\n\treturn draggable.props.axis === 'both' ||\n\t\t\tdraggable.props.axis === 'y';\n}\n\nfunction canDragX(draggable) {\n\treturn draggable.props.axis === 'both' ||\n\t\t\tdraggable.props.axis === 'x';\n}\n\nfunction isFunction(func) {\n  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n}\n\n// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\nfunction findInArray(array, callback) {\n  for (var i = 0, length = array.length, element = null; i < length, element = array[i]; i++) {\n    if (callback.apply(callback, [element, i, array])) return element;\n  }\n}\n\nfunction matchesSelector(el, selector) {\n  var method = findInArray([\n    'matches',\n    'webkitMatchesSelector',\n    'mozMatchesSelector',\n    'msMatchesSelector',\n    'oMatchesSelector'\n  ], function(method){\n    return isFunction(el[method]);\n  });\n\n  return el[method].call(el, selector);\n}\n\nfunction positionToCSSTransform(style) {\n\t// Replace unitless items with px\n\tvar x = ('' + style.left).replace(/(\\d)$/, '$1px');\n\tvar y = ('' + style.top).replace(/(\\d)$/, '$1px');\n\tstyle.transform = 'translate(' + x + ',' + y + ')';\n\tstyle.WebkitTransform = 'translate(' + x + ',' + y + ')';\n\tstyle.OTransform = 'translate(' + x + ',' + y + ')';\n\tstyle.msTransform = 'translate(' + x + ',' + y + ')';\n\tstyle.MozTransform = 'translate(' + x + ',' + y + ')';\n\tdelete style.left;\n\tdelete style.top;\n\treturn style;\n}\n\n// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886\n/* Conditional to fix node server side rendering of component */\nif (typeof window === 'undefined') {\n    // Do Node Stuff\n    var isTouchDevice = false;\n} else {\n    // Do Browser Stuff\n    var isTouchDevice = 'ontouchstart' in window || // works on most browsers\n      'onmsgesturechange' in window; // works on ie10 on ms surface\n}\n\n// look ::handleDragStart\n//function isMultiTouch(e) {\n//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1\n//}\n\n/**\n * simple abstraction for dragging events names\n * */\nvar dragEventFor = (function () {\n  var eventsFor = {\n    touch: {\n      start: 'touchstart',\n      move: 'touchmove',\n      end: 'touchend'\n    },\n    mouse: {\n      start: 'mousedown',\n      move: 'mousemove',\n      end: 'mouseup'\n    }\n  };\n  return eventsFor[isTouchDevice ? 'touch' : 'mouse'];\n})();\n\n/**\n * get {clientX, clientY} positions of control\n * */\nfunction getControlPosition(e) {\n  var position = (e.touches && e.touches[0]) || e;\n  return {\n    clientX: position.clientX,\n    clientY: position.clientY\n  };\n}\n\nfunction addEvent(el, event, handler) {\n\tif (!el) { return; }\n\tif (el.attachEvent) {\n\t\tel.attachEvent('on' + event, handler);\n\t} else if (el.addEventListener) {\n\t\tel.addEventListener(event, handler, true);\n\t} else {\n\t\tel['on' + event] = handler;\n\t}\n}\n\nfunction removeEvent(el, event, handler) {\n\tif (!el) { return; }\n\tif (el.detachEvent) {\n\t\tel.detachEvent('on' + event, handler);\n\t} else if (el.removeEventListener) {\n\t\tel.removeEventListener(event, handler, true);\n\t} else {\n\t\tel['on' + event] = null;\n\t}\n}\n\nmodule.exports = React.createClass({\n\tdisplayName: 'Draggable',\n\tmixins: [PureRenderMixin],\n\n\tpropTypes: {\n\t\t/**\n\t\t * `axis` determines which axis the draggable can move.\n\t\t *\n\t\t * 'both' allows movement horizontally and vertically.\n\t\t * 'x' limits movement to horizontal axis.\n\t\t * 'y' limits movement to vertical axis.\n\t\t *\n\t\t * Defaults to 'both'.\n\t\t */\n\t\taxis: React.PropTypes.oneOf(['both', 'x', 'y']),\n\n\t\t/**\n\t\t * `handle` specifies a selector to be used as the handle that initiates drag.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t    \treturn (\n\t\t * \t    \t \t<Draggable handle=\".handle\">\n\t\t * \t    \t \t  <div>\n\t\t * \t    \t \t      <div className=\"handle\">Click me to drag</div>\n\t\t * \t    \t \t      <div>This is some other content</div>\n\t\t * \t    \t \t  </div>\n\t\t * \t    \t\t</Draggable>\n\t\t * \t    \t);\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\thandle: React.PropTypes.string,\n\n\t\t/**\n\t\t * `cancel` specifies a selector to be used to prevent drag initialization.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return(\n\t\t * \t            <Draggable cancel=\".cancel\">\n\t\t * \t                <div>\n\t\t * \t                \t<div className=\"cancel\">You can't drag from here</div>\n\t\t *\t\t\t\t\t\t<div>Dragging here works fine</div>\n\t\t * \t                </div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tcancel: React.PropTypes.string,\n\n\t\t/**\n\t\t * `grid` specifies the x and y that dragging should snap to.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return (\n\t\t * \t            <Draggable grid={[25, 25]}>\n\t\t * \t                <div>I snap to a 25 x 25 grid</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tgrid: React.PropTypes.arrayOf(React.PropTypes.number),\n\n\t\t/**\n\t\t * `start` specifies the x and y that the dragged item should start at\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return (\n\t\t * \t            <Draggable start={{x: 25, y: 25}}>\n\t\t * \t                <div>I start with left: 25px; top: 25px;</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tstart: React.PropTypes.object,\n\n\t\t/**\n\t\t * `moveOnStartChange` tells the Draggable element to reset its position\n\t\t * if the `start` parameters are changed. By default, if the `start` \n\t\t * parameters change, the Draggable element still remains where it started\n\t\t * or was dragged to.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t\t\tonButtonClick: function () {\n\t\t * \t\t\t\tthis.setState({clicked: true});\n\t\t * \t\t\t},\n\t\t * \t    render: function () {\n\t\t * \t    \t\tvar start = this.state.clicked ?\n\t\t * \t    \t\t  {x: 25, y: 25} :\n\t\t * \t    \t\t  {x: 125, y: 125};\n\t\t * \t        return (\n\t\t * \t            <Draggable start={start}>\n\t\t * \t                <div>I start with left: 25px; top: 25px;,\n\t\t * \t                but move to left: 125px; top: 125px; when the button\n\t\t * \t                is clicked.</div>\n\t\t * \t                <div onClick={this.onButtonClick}>Button</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tmoveOnStartChange: React.PropTypes.bool,\n\n\t\t/**\n\t\t * `useCSSTransforms` if true will place the element using translate(x, y)\n\t\t * rather than CSS top/left.\n\t\t *\n\t\t * This generally gives better performance, and is useful in combination with\n\t\t * other layout systems that use translate(), such as react-grid-layout.\n\t\t */\n\t\tuseCSSTransforms: React.PropTypes.bool,\n\n\t\t/**\n\t\t * `zIndex` specifies the zIndex to use while dragging.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```jsx\n\t\t * \tvar App = React.createClass({\n\t\t * \t    render: function () {\n\t\t * \t        return (\n\t\t * \t            <Draggable zIndex={100}>\n\t\t * \t                <div>I have a zIndex</div>\n\t\t * \t            </Draggable>\n\t\t * \t        );\n\t\t * \t    }\n\t\t * \t});\n\t\t * ```\n\t\t */\n\t\tzIndex: React.PropTypes.number,\n\n\t\t/**\n\t\t * Called when dragging starts.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```js\n\t\t *\tfunction (event, ui) {}\n\t\t * ```\n\t\t *\n\t\t * `event` is the Event that was triggered.\n\t\t * `ui` is an object:\n\t\t *\n\t\t * ```js\n\t\t *\t{\n\t\t *\t\tposition: {top: 0, left: 0}\n\t\t *\t}\n\t\t * ```\n\t\t */\n\t\tonStart: React.PropTypes.func,\n\n\t\t/**\n\t\t * Called while dragging.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```js\n\t\t *\tfunction (event, ui) {}\n\t\t * ```\n\t\t *\n\t\t * `event` is the Event that was triggered.\n\t\t * `ui` is an object:\n\t\t *\n\t\t * ```js\n\t\t *\t{\n\t\t *\t\tposition: {top: 0, left: 0}\n\t\t *\t}\n\t\t * ```\n\t\t */\n\t\tonDrag: React.PropTypes.func,\n\n\t\t/**\n\t\t * Called when dragging stops.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * ```js\n\t\t *\tfunction (event, ui) {}\n\t\t * ```\n\t\t *\n\t\t * `event` is the Event that was triggered.\n\t\t * `ui` is an object:\n\t\t *\n\t\t * ```js\n\t\t *\t{\n\t\t *\t\tposition: {top: 0, left: 0}\n\t\t *\t}\n\t\t * ```\n\t\t */\n\t\tonStop: React.PropTypes.func,\n\n\t\t/**\n\t\t * A workaround option which can be passed if onMouseDown needs to be accessed, \n\t\t * since it'll always be blocked (due to that there's internal use of onMouseDown)\n\t\t *\n\t\t */\n\t\tonMouseDown: React.PropTypes.func\n\t},\n\n\tcomponentWillUnmount: function() {\n\t\t// Remove any leftover event handlers\n\t\tremoveEvent(window, dragEventFor['move'], this.handleDrag);\n\t\tremoveEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t},\n\n\tcomponentWillReceiveProps: function(nextProps) {\n\t\t// If this is set to watch a changing start position, \n\t\t// set x and y to the new position.\n\t\tif (nextProps.moveOnStartChange) {\n\t\t\tthis.setState({\n\t\t\t\tclientX: nextProps.start.x,\n\t\t\t\tclientY: nextProps.start.y\n\t\t\t});\n\t\t}\n\t},\n\n\tgetDefaultProps: function () {\n\t\treturn {\n\t\t\taxis: 'both',\n\t\t\thandle: null,\n\t\t\tcancel: null,\n\t\t\tgrid: null,\n\t\t\tstart: {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0\n\t\t\t},\n\t\t\tmoveOnStartChange: false,\n\t\t\tuseCSSTransforms: false,\n\t\t\tzIndex: NaN,\n\t\t\tonStart: emptyFunction,\n\t\t\tonDrag: emptyFunction,\n\t\t\tonStop: emptyFunction,\n\t\t\tonMouseDown: emptyFunction\n\t\t};\n\t},\n\n\tgetInitialState: function () {\n\t\treturn {\n\t\t\t// Whether or not currently dragging\n\t\t\tdragging: false,\n\n\t\t\t// Start top/left of this.getDOMNode()\n\t\t\tstartX: 0, startY: 0,\n\n\t\t\t// Offset between start top/left and mouse top/left\n\t\t\toffsetX: 0, offsetY: 0,\n\n\t\t\t// Current top/left of this.getDOMNode()\n\t\t\tclientX: this.props.start.x, clientY: this.props.start.y\n\t\t};\n\t},\n\n\thandleDragStart: function (e) {\n    // todo: write right implementation to prevent multitouch drag\n    // prevent multi-touch events\n    // if (isMultiTouch(e)) {\n    //     this.handleDragEnd.apply(e, arguments);\n    //     return\n    // }\n\n\t\t// Make it possible to attach event handlers on top of this one\n\t\tthis.props.onMouseDown(e);\n\n\t\t// Only catch left clicks, if clicking\n\t\tif (typeof e.button === \"number\" && e.button !== 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar node = this.getDOMNode();\n\n\t\t// Short circuit if handle or cancel prop was provided and selector doesn't match\n\t\tif ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||\n\t\t\t(this.props.cancel && matchesSelector(e.target, this.props.cancel))) {\n\t\t\treturn;\n\t\t}\n\n    var dragPoint = getControlPosition(e);\n\n\t\t// Initiate dragging\n\t\tthis.setState({\n\t\t\tdragging: true,\n\t\t\toffsetX: parseInt(dragPoint.clientX, 10),\n\t\t\toffsetY: parseInt(dragPoint.clientY, 10),\n\t\t\tstartX: parseInt(this.state.clientX, 10) || 0,\n\t\t\tstartY: parseInt(this.state.clientY, 10) || 0\n\t\t});\n\n\t\t// Add a class to the body to disable user-select. This prevents text from \n\t\t// being selected all over the page.\n\t\tdocument.body.className += \" react-draggable-active\";\n\n\t\t// Call event handler\n\t\tconsole.log(createUIEvent(this));\n\t\tthis.props.onStart(e, createUIEvent(this));\n\n\t\t// Add event handlers\n\t\taddEvent(window, dragEventFor['move'], this.handleDrag);\n\t\taddEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t},\n\n\thandleDragEnd: function (e) {\n\t\t// Short circuit if not currently dragging\n\t\tif (!this.state.dragging) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Turn off dragging\n\t\tthis.setState({\n\t\t\tdragging: false\n\t\t});\n\n\t\t// Remove the body class used to disable user-select.\n\t\tdocument.body.className = document.body.className.replace(\" react-draggable-active\", \"\");\n\n\t\t// Call event handler\n\t\tthis.props.onStop(e, createUIEvent(this));\n\n\t\t// Remove event handlers\n    removeEvent(window, dragEventFor['move'], this.handleDrag);\n    removeEvent(window, dragEventFor['end'], this.handleDragEnd);\n\t},\n\n\thandleDrag: function (e) {\n    var dragPoint = getControlPosition(e);\n\n\t\t// Calculate top and left\n    var clientX = (this.state.startX + (dragPoint.clientX - this.state.offsetX));\n    var clientY = (this.state.startY + (dragPoint.clientY - this.state.offsetY));\n\n\t\t// Snap to grid if prop has been provided\n\t\tif (Array.isArray(this.props.grid)) {\n\t\t\tvar directionX = clientX < parseInt(this.state.clientX, 10) ? -1 : 1;\n\t\t\tvar directionY = clientY < parseInt(this.state.clientY, 10) ? -1 : 1;\n\n\t\t\tclientX = Math.abs(clientX - parseInt(this.state.clientX, 10)) >= this.props.grid[0]\n\t\t\t\t\t? (parseInt(this.state.clientX, 10) + (this.props.grid[0] * directionX))\n\t\t\t\t\t: parseInt(this.state.clientX, 10);\n\n\t\t\tclientY = Math.abs(clientY - parseInt(this.state.clientY, 10)) >= this.props.grid[1]\n\t\t\t\t\t? (parseInt(this.state.clientY, 10) + (this.props.grid[1] * directionY))\n\t\t\t\t\t: parseInt(this.state.clientY, 10);\n\t\t}\n\n\t\t// Min/max constraints\n\t\tif (Array.isArray(this.props.minConstraints)) {\n\t\t\tclientX = Math.max(this.props.minConstraints[0], clientX);\n\t\t\tclientY = Math.max(this.props.minConstraints[1], clientY);\n\t\t}\n\t\tif (Array.isArray(this.props.maxConstraints)) {\n\t\t\tclientX = Math.min(this.props.maxConstraints[0], clientX);\n\t\t\tclientY = Math.min(this.props.maxConstraints[1], clientY);\n\t\t}\n\n\t\t// Update top and left\n\t\tthis.setState({\n\t\t\tclientX: clientX,\n\t\t\tclientY: clientY\n\t\t});\n\n\t\t// Call event handler\n\t\tthis.props.onDrag(e, createUIEvent(this));\n\t},\n\n\trender: function () {\n\t\tvar style = {\n\t\t\t// Set top if vertical drag is enabled\n\t\t\ttop: canDragY(this)\n\t\t\t\t? this.state.clientY\n\t\t\t\t: this.state.startY,\n\n\t\t\t// Set left if horizontal drag is enabled\n\t\t\tleft: canDragX(this)\n\t\t\t\t? this.state.clientX\n\t\t\t\t: this.state.startX\n\t\t};\n\n\t\tif (this.props.useCSSTransforms) {\n\t\t\tstyle = positionToCSSTransform(style);\n\t\t}\n\n\t\t// Set zIndex if currently dragging and prop has been provided\n\t\tif (this.state.dragging && !isNaN(this.props.zIndex)) {\n\t\t\tstyle.zIndex = this.props.zIndex;\n\t\t}\n\n\t\t// Reuse the child provided\n\t\t// This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t\treturn cloneWithProps(React.Children.only(this.props.children), {\n\t\t\tstyle: style,\n\t\t\tclassName: 'react-draggable' + (this.state.dragging ? ' react-draggable-dragging' : ''),\n\n\t\t\tonMouseDown: this.handleDragStart,\n\t\t\tonTouchStart: function(ev){\n        ev.preventDefault(); // prevent for scroll\n        return this.handleDragStart.apply(this, arguments);\n      }.bind(this),\n\n\t\t\tonMouseUp: this.handleDragEnd,\n\t\t\tonTouchEnd: this.handleDragEnd\n\t\t});\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-resizable/~/react-draggable/lib/draggable.js\n ** module id = 24\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactContext\n */\n\n\"use strict\";\n\nvar assign = require(\"./Object.assign\");\n\n/**\n * Keeps track of the current context.\n *\n * The context is automatically passed down the component ownership hierarchy\n * and is accessible via `this.context` on ReactCompositeComponents.\n */\nvar ReactContext = {\n\n  /**\n   * @internal\n   * @type {object}\n   */\n  current: {},\n\n  /**\n   * Temporarily extends the current context while executing scopedCallback.\n   *\n   * A typical use case might look like\n   *\n   *  render: function() {\n   *    var children = ReactContext.withContext({foo: 'foo'}, () => (\n   *\n   *    ));\n   *    return <div>{children}</div>;\n   *  }\n   *\n   * @param {object} newContext New context to merge into the existing context\n   * @param {function} scopedCallback Callback to run with the new context\n   * @return {ReactComponent|array<ReactComponent>}\n   */\n  withContext: function(newContext, scopedCallback) {\n    var result;\n    var previousContext = ReactContext.current;\n    ReactContext.current = assign({}, previousContext, newContext);\n    try {\n      result = scopedCallback();\n    } finally {\n      ReactContext.current = previousContext;\n    }\n    return result;\n  }\n\n};\n\nmodule.exports = ReactContext;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/ReactContext.js\n ** module id = 25\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCurrentOwner\n */\n\n\"use strict\";\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n *\n * The depth indicate how many composite components are above this render level.\n */\nvar ReactCurrentOwner = {\n\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n\n};\n\nmodule.exports = ReactCurrentOwner;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/ReactCurrentOwner.js\n ** module id = 26\n ** module chunks = 0\n **/","/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElement\n */\n\n\"use strict\";\n\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar warning = require(\"./warning\");\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true\n};\n\n/**\n * Warn for mutations.\n *\n * @internal\n * @param {object} object\n * @param {string} key\n */\nfunction defineWarningProperty(object, key) {\n  Object.defineProperty(object, key, {\n\n    configurable: false,\n    enumerable: true,\n\n    get: function() {\n      if (!this._store) {\n        return null;\n      }\n      return this._store[key];\n    },\n\n    set: function(value) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        false,\n        'Don\\'t set the ' + key + ' property of the component. ' +\n        'Mutate the existing props object instead.'\n      ) : null);\n      this._store[key] = value;\n    }\n\n  });\n}\n\n/**\n * This is updated to true if the membrane is successfully created.\n */\nvar useMutationMembrane = false;\n\n/**\n * Warn for mutations.\n *\n * @internal\n * @param {object} element\n */\nfunction defineMutationMembrane(prototype) {\n  try {\n    var pseudoFrozenProperties = {\n      props: true\n    };\n    for (var key in pseudoFrozenProperties) {\n      defineWarningProperty(prototype, key);\n    }\n    useMutationMembrane = true;\n  } catch (x) {\n    // IE will fail on defineProperty\n  }\n}\n\n/**\n * Base constructor for all React elements. This is only used to make this\n * work with a dynamic instanceof check. Nothing should live on this prototype.\n *\n * @param {*} type\n * @param {string|object} ref\n * @param {*} key\n * @param {*} props\n * @internal\n */\nvar ReactElement = function(type, key, ref, owner, context, props) {\n  // Built-in properties that belong on the element\n  this.type = type;\n  this.key = key;\n  this.ref = ref;\n\n  // Record the component responsible for creating this element.\n  this._owner = owner;\n\n  // TODO: Deprecate withContext, and then the context becomes accessible\n  // through the owner.\n  this._context = context;\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    // The validation flag and props are currently mutative. We put them on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    this._store = { validated: false, props: props };\n\n    // We're not allowed to set props directly on the object so we early\n    // return and rely on the prototype membrane to forward to the backing\n    // store.\n    if (useMutationMembrane) {\n      Object.freeze(this);\n      return;\n    }\n  }\n\n  this.props = props;\n};\n\n// We intentionally don't expose the function on the constructor property.\n// ReactElement should be indistinguishable from a plain object.\nReactElement.prototype = {\n  _isReactElement: true\n};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  defineMutationMembrane(ReactElement.prototype);\n}\n\nReactElement.createElement = function(type, config, children) {\n  var propName;\n\n  // Reserved names are extracted\n  var props = {};\n\n  var key = null;\n  var ref = null;\n\n  if (config != null) {\n    ref = config.ref === undefined ? null : config.ref;\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        config.key !== null,\n        'createElement(...): Encountered component with a `key` of null. In ' +\n        'a future version, this will be treated as equivalent to the string ' +\n        '\\'null\\'; instead, provide an explicit key or use undefined.'\n      ) : null);\n    }\n    // TODO: Change this back to `config.key === undefined`\n    key = config.key == null ? null : '' + config.key;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (config.hasOwnProperty(propName) &&\n          !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (typeof props[propName] === 'undefined') {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return new ReactElement(\n    type,\n    key,\n    ref,\n    ReactCurrentOwner.current,\n    ReactContext.current,\n    props\n  );\n};\n\nReactElement.createFactory = function(type) {\n  var factory = ReactElement.createElement.bind(null, type);\n  // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. <Foo />.type === Foo.type.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  factory.type = type;\n  return factory;\n};\n\nReactElement.cloneAndReplaceProps = function(oldElement, newProps) {\n  var newElement = new ReactElement(\n    oldElement.type,\n    oldElement.key,\n    oldElement.ref,\n    oldElement._owner,\n    oldElement._context,\n    newProps\n  );\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    // If the key on the original is valid, then the clone is valid\n    newElement._store.validated = oldElement._store.validated;\n  }\n  return newElement;\n};\n\n/**\n * @param {?object} object\n * @return {boolean} True if `object` is a valid component.\n * @final\n */\nReactElement.isValidElement = function(object) {\n  // ReactTestUtils is often used outside of beforeEach where as React is\n  // within it. This leads to two different instances of React on the same\n  // page. To identify a element from a different React instance we use\n  // a flag instead of an instanceof check.\n  var isElement = !!(object && object._isReactElement);\n  // if (isElement && !(object instanceof ReactElement)) {\n  // This is an indicator that you're using multiple versions of React at the\n  // same time. This will screw with ownership and stuff. Fix it, please.\n  // TODO: We could possibly warn here.\n  // }\n  return isElement;\n};\n\nmodule.exports = ReactElement;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/ReactElement.js\n ** module id = 27\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTransferer\n */\n\n\"use strict\";\n\nvar assign = require(\"./Object.assign\");\nvar emptyFunction = require(\"./emptyFunction\");\nvar invariant = require(\"./invariant\");\nvar joinClasses = require(\"./joinClasses\");\nvar warning = require(\"./warning\");\n\nvar didWarn = false;\n\n/**\n * Creates a transfer strategy that will merge prop values using the supplied\n * `mergeStrategy`. If a prop was previously unset, this just sets it.\n *\n * @param {function} mergeStrategy\n * @return {function}\n */\nfunction createTransferStrategy(mergeStrategy) {\n  return function(props, key, value) {\n    if (!props.hasOwnProperty(key)) {\n      props[key] = value;\n    } else {\n      props[key] = mergeStrategy(props[key], value);\n    }\n  };\n}\n\nvar transferStrategyMerge = createTransferStrategy(function(a, b) {\n  // `merge` overrides the first object's (`props[key]` above) keys using the\n  // second object's (`value`) keys. An object's style's existing `propA` would\n  // get overridden. Flip the order here.\n  return assign({}, b, a);\n});\n\n/**\n * Transfer strategies dictate how props are transferred by `transferPropsTo`.\n * NOTE: if you add any more exceptions to this list you should be sure to\n * update `cloneWithProps()` accordingly.\n */\nvar TransferStrategies = {\n  /**\n   * Never transfer `children`.\n   */\n  children: emptyFunction,\n  /**\n   * Transfer the `className` prop by merging them.\n   */\n  className: createTransferStrategy(joinClasses),\n  /**\n   * Transfer the `style` prop (which is an object) by merging them.\n   */\n  style: transferStrategyMerge\n};\n\n/**\n * Mutates the first argument by transferring the properties from the second\n * argument.\n *\n * @param {object} props\n * @param {object} newProps\n * @return {object}\n */\nfunction transferInto(props, newProps) {\n  for (var thisKey in newProps) {\n    if (!newProps.hasOwnProperty(thisKey)) {\n      continue;\n    }\n\n    var transferStrategy = TransferStrategies[thisKey];\n\n    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {\n      transferStrategy(props, thisKey, newProps[thisKey]);\n    } else if (!props.hasOwnProperty(thisKey)) {\n      props[thisKey] = newProps[thisKey];\n    }\n  }\n  return props;\n}\n\n/**\n * ReactPropTransferer are capable of transferring props to another component\n * using a `transferPropsTo` method.\n *\n * @class ReactPropTransferer\n */\nvar ReactPropTransferer = {\n\n  TransferStrategies: TransferStrategies,\n\n  /**\n   * Merge two props objects using TransferStrategies.\n   *\n   * @param {object} oldProps original props (they take precedence)\n   * @param {object} newProps new props to merge in\n   * @return {object} a new object containing both sets of props merged.\n   */\n  mergeProps: function(oldProps, newProps) {\n    return transferInto(assign({}, oldProps), newProps);\n  },\n\n  /**\n   * @lends {ReactPropTransferer.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Transfer props from this component to a target component.\n     *\n     * Props that do not have an explicit transfer strategy will be transferred\n     * only if the target component does not already have the prop set.\n     *\n     * This is usually used to pass down props to a returned root component.\n     *\n     * @param {ReactElement} element Component receiving the properties.\n     * @return {ReactElement} The supplied `component`.\n     * @final\n     * @protected\n     */\n    transferPropsTo: function(element) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        element._owner === this,\n        '%s: You can\\'t call transferPropsTo() on a component that you ' +\n        'don\\'t own, %s. This usually means you are calling ' +\n        'transferPropsTo() on a component passed in as props or children.',\n        this.constructor.displayName,\n        typeof element.type === 'string' ?\n        element.type :\n        element.type.displayName\n      ) : invariant(element._owner === this));\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        if (!didWarn) {\n          didWarn = true;\n          (\"production\" !== process.env.NODE_ENV ? warning(\n            false,\n            'transferPropsTo is deprecated. ' +\n            'See http://fb.me/react-transferpropsto for more information.'\n          ) : null);\n        }\n      }\n\n      // Because elements are immutable we have to merge into the existing\n      // props object rather than clone it.\n      transferInto(element.props, this.props);\n\n      return element;\n    }\n\n  }\n};\n\nmodule.exports = ReactPropTransferer;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/ReactPropTransferer.js\n ** module id = 28\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n\"use strict\";\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        'Invariant Violation: ' +\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/invariant.js\n ** module id = 29\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule joinClasses\n * @typechecks static-only\n */\n\n\"use strict\";\n\n/**\n * Combines multiple className strings into one.\n * http://jsperf.com/joinclasses-args-vs-array\n *\n * @param {...?string} classes\n * @return {string}\n */\nfunction joinClasses(className/*, ... */) {\n  if (!className) {\n    className = '';\n  }\n  var nextClass;\n  var argLength = arguments.length;\n  if (argLength > 1) {\n    for (var ii = 1; ii < argLength; ii++) {\n      nextClass = arguments[ii];\n      if (nextClass) {\n        className = (className ? className + ' ' : '') + nextClass;\n      }\n    }\n  }\n  return className;\n}\n\nmodule.exports = joinClasses;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/joinClasses.js\n ** module id = 30\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyOf\n */\n\n/**\n * Allows extraction of a minified key. Let's the build system minify keys\n * without loosing the ability to dynamically use key strings as values\n * themselves. Pass in an object with a single key/val pair and it will return\n * you the string key of that single record. Suppose you want to grab the\n * value for a key 'className' inside of an object. Key/val minification may\n * have aliased that key to be 'xa12'. keyOf({className: null}) will return\n * 'xa12' in that case. Resolve keys you want to use once at startup time, then\n * reuse those resolutions.\n */\nvar keyOf = function(oneKeyObj) {\n  var key;\n  for (key in oneKeyObj) {\n    if (!oneKeyObj.hasOwnProperty(key)) {\n      continue;\n    }\n    return key;\n  }\n  return null;\n};\n\n\nmodule.exports = keyOf;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/keyOf.js\n ** module id = 31\n ** module chunks = 0\n **/","/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shallowEqual\n */\n\n\"use strict\";\n\n/**\n * Performs equality by iterating through keys on an object and returning\n * false when any key has values which are not strictly equal between\n * objA and objB. Returns true when the values of all keys are strictly equal.\n *\n * @return {boolean}\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n  var key;\n  // Test for A's keys different from B.\n  for (key in objA) {\n    if (objA.hasOwnProperty(key) &&\n        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n      return false;\n    }\n  }\n  // Test for B's keys missing from A.\n  for (key in objB) {\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = shallowEqual;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react/lib/shallowEqual.js\n ** module id = 32\n ** module chunks = 0\n **/","module.exports = require('./lib/draggable');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-draggable/index.js\n ** module id = 19\n ** module chunks = 0\n **/"],"sourceRoot":""}